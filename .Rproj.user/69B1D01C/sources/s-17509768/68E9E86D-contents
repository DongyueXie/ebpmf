library(genlasso)
library(wavethresh)
library(smashr)

ispowerof2 <- function (x){
  x >= 1 & 2^ceiling(log2(x)) == x
}


smooth_func = function(y,smooth_method,pos,ord,filter.number,family){
  n = length(y)

  if(smooth_method=='trendfiltering'){
    v_k = trendfilter(y,pos,ord=ord)
    v_k.cv = quiet(cv.trendfilter(v_k))
    out = coef(v_k,lambda = v_k.cv$lambda.min)$beta
  }
  if(smooth_method=='wavelet'){

    if(!ispowerof2(length(y))){
      reflect.x = reflect(y)
      y = reflect.x$x
      idx = reflect.x$idx
    }else{
      idx = 1:length(y)
    }

    v_k.wd = wd(y,filter.number,family)
    v_k.thresh = threshold(v_k.wd,policy = 'universal')
    out = wr(v_k.thresh)[idx]
  }
  if(smooth_method=='runmed'){
    win.size = round(sqrt(n)/2)*2+1
    out = runmed(y,win.size)
  }
  out
}

NMF_HALS = function(X,k,smooth_u=F,smooth_v=T,ord=1,
                       smooth_method='trendfiltering',
                       filter.number=1,family='DaubExPhase',
                       pos_u,pos_v,maxiter=100,
                       printevery=10,tol=1e-2,
                       seed=12345){

  set.seed(seed)
  quiet = function(x) {
    sink(tempfile())
    on.exit(sink())
    invisible(force(x))
  }

  n = dim(X)[1]
  p = dim(X)[2]
  U = matrix(runif(n*K),nrow=n,ncol=K)
  V = matrix(runif(K*p),nrow=K,ncol=p)

  loss=norm(X-U%*%V)

  for(iter in 1:maxiter){

    for(k in 1:K){
      R_k = X - U[,-k]%*%V[-k,]

      Ru = pmax(t(R_k)%*%U[,k,drop=F],0)

      if(all(Ru==0)){
        V[k,] = rep(0,p)
      }else{
        if(smooth_v){

          V[k,] = smooth_func(Ru/sum((U[,k])^2),smooth_method,pos_v,ord,filter.number,family)

        }else{
          V[k,] = Ru/sum((U[,k])^2)
        }
      }

      Rv = pmax(R_k%*%V[k,],0)

      if(all(Rv==0)){
        U[,k] = rep(0,n)
      }else{
        if(smooth_u){
          U[,k] = smooth_func(Rv/sum((V[k,])^2),smooth_method,pos_u,ord,filter.number,family)
        }else{
          U[,k] = Rv/sum((V[k,])^2)
        }
      }

    }

    loss[iter+1]=norm(X-U%*%V)

    if(iter%%printevery==0){
      print(sprintf('At iter %d, loss: %f',iter,loss[iter+1]))
    }

    if(abs(loss[iter+1]-loss[iter])<=tol){
      break
    }

  }

  return(list(U=U,V=V,loss=loss))

}


########################################################
##############simulation###############################
set.seed(123)
n = 120
p = 300
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)

L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1

L = L + matrix(runif(n*K,0,0.5),nrow=n)

FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10

lambda = L %*% FF
X = matrix(rpois(n=length(lambda),lambda),nrow=n)

fit  = NMF_HALS(X,K,smooth_method = 'wavelet',smooth_v = F)

plot(fit$V[1,],type = 'l')
plot(fit$V[2,],type = 'l')
plot(fit$V[3,],type = 'l')


plot(fit$U[,1],type = 'l')
plot(fit$U[,2],type = 'l')
plot(fit$U[,3],type = 'l')


########################################################
################real data#############################

RPS13 = read.table('/project2/compbio/CoverageCounts/Counts_11:17095938-17099220.txt.gz',header = TRUE)

tissues = colnames(RPS13)
tissue = c()
for(i in 1:length(tissues)){
  tissue = c(tissue, (strsplit(tissues[i],split = '_')[[1]])[1])
}

idx = c(which(tissue=='GTEXAdipose'), which(tissue=='GTEXSkinExposed'))

K=3

fit_NMF = NMF_HALS(t(RPS13[,idx]),k=K,smooth_method = 'runmed',smooth_v = T,seed = 0)

lf = poisson2multinom(t(fit_NMF$V),fit_NMF$U)

plot(lf$FF[,1],col=2,ylim=range(lf$FF),type='l',xlab = 'base',ylab='Intensity',main='Factors')
lines(lf$FF[,2],col=3)
lines(lf$FF[,3],col=4)

fit_NMF = NMF_HALS(t(RPS13[,idx]),k=K,smooth_method = 'wavelet')

lf = poisson2multinom(t(fit_NMF$V),fit_NMF$U)

plot(lf$FF[,1],col=2,ylim=range(lf$FF),type='l',xlab = 'base',ylab='Intensity',main='Factors')
lines(lf$FF[,2],col=3)
lines(lf$FF[,3],col=4)

