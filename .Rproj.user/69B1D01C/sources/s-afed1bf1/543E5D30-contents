indis_H3K4me1 = (colnames(H3K4seq))[-c(1,2)]
indis_H3K4me1
for(i in 1:length(indis_H3K4me1)){
name_i = strsplit(indis_H3K4me1[i],split = '_')[[1]]
indis_H3K4me1[i] = paste(name_i[1],name_i[2],sep = '_')
}
indis = intersect(intersect(indis_ATAC,indis_RNA),indis_H3K4me1)
indis
length(indis)
Y_RNA = t(RNAseq[,match(indis,indis_RNA)+2])
Y_H3K4 = t(H3K4seq[,match(indis,indis_H3K4me1)+2])
Y_ATAC = t(ATACseq[,match(indis,indis_ATAC)+2])
dim(Y_RNA)
Y_RNAr = do.call(cbind, by(t(Y_RNA), (seq(ncol(Y_RNA)) - 1) %/% 10, FUN = colSums))
dim(Y_RNAr)
Y_RNAr = do.call(cbind, by(t(Y_RNA), (seq(ncol(Y_RNA)) - 1) %/% 11, FUN = colSums))
dim(Y_RNAr)
426090/11
dim(Y_RNA)
dim(Y_H3K4)
dim(Y_ATAC)
all.equal(c(1,2,3))
all.equal(1,2,3)
all.equal(1,2)
var(c(dim(Y_RNA)[,2],dim(Y_H3K4)[,2],dim(Y_ATAC)[,2]))
var(c(dim(Y_RNA)[2],dim(Y_H3K4)[2],dim(Y_ATAC)[2]))
var(c(ncol(Y_RNA),ncol(Y_H3K4),ncol(Y_ATAC)))
l = min(c(ncol(Y_RNA),ncol(Y_H3K4),ncol(Y_ATAC)))
l
ncol(Y_RNA)%%10
ncol(Y_RNA)%%11
by
l = ncol(Y_RNA)
l
floor(l/11)*11
Y_H3K4r = do.call(cbind, by(t(Y_H3K4), (seq(ncol(Y_H3K4)) - 1) %/% merge_len, FUN = colSums))
Y_ATACr = do.call(cbind, by(t(Y_ATAC), (seq(ncol(Y_ATAC)) - 1) %/% merge_len, FUN = colSums))
merge_len=10
Y_H3K4r = do.call(cbind, by(t(Y_H3K4), (seq(ncol(Y_H3K4)) - 1) %/% merge_len, FUN = colSums))
Y_ATACr = do.call(cbind, by(t(Y_ATAC), (seq(ncol(Y_ATAC)) - 1) %/% merge_len, FUN = colSums))
X = matrix(rpois(n=length(lambda),lambda),nrow=n)
X
X = Matrix::Matrix(X,sparse = T)
fit_smooth = stm(X,3,nugget = F,tol=1e-4)
plot(fit_smooth$EF[,1],type='l')
plot(fit_smooth$EF[,2],type='l')
plot(fit_smooth$EF[,3],type='l')
fit_smooth = stm(X,3,nugget = T,tol=1e-4)
plot(fit_smooth$EF[,1],type='l')
plot(fit_smooth$EF[,2],type='l')
plot(fit_smooth$EF[,3],type='l')
library(Matrix)
X = cbind(Y_RNAr,Y_H3K4r,Y_ATACr)
X = Matrix(X,sparse = T)
length(X@i)
1431195/prod(dim(X))
print(paste('running ',gene))
dim(X)
fit_stm = stm(X,K=10,nugget=TRUE,printevery = 10,tol=1e-4)
X = cbind(Y_RNAr,Y_H3K4r,Y_ATACr)
# fit NMF model
fit_NMF = NNLM::nnmf(X,K=10,method='scd',loss='mkl')
?nnmf
# fit NMF model
fit_NMF = NNLM::nnmf(X,k=10,method='scd',loss='mkl')
# fit NMF model
fit_NMF = NNLM::nnmf(X,k=10,method='lee',loss='mkl')
# fit NMF model
fit_NMF = NNLM::nnmf(X,k=10,method='scd',loss='mkl',max.iter = 50)
init = list(L_init = fit_NMF$W,F_init = t(fit_NMF$H))
?stm
X = Matrix(X,sparse = T)
# run stm + nugget
fit_stm = stm(X,K=10,nugget=TRUE,printevery = 1,tol=1e-4,init = init)
dim(X)
n = dim(X)[1]
p = dim(X)[2]
n
p
res = init_stm(X,K=10,init)
init_stm
KL = c()
#browser()
KL[1] = mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
KL
X_idx = summary(X)
k = 1
# get row and col sums of EZ_k
b_k = res$ql$Elogl[X_idx$i,k]+res$qf$Elogf[X_idx$j,k] - res$a
EZ_k = sparseMatrix(i=X_idx$i,j=X_idx$j,x = X_idx$x*exp(b_k)/res$b,dims = c(n,p))
l_seq = rowSums(EZ_k)
l_scale = sum(res$qf$Ef[,k])
l_seq
l_scale
lk_hat = update_nsmooth(l_seq,l_scale,ebpm_method='ebpm_point_gamma')
lk_hat = update_nsmooth(l_seq,l_scale,ebpm_method='point_gamma')
f_seq = colSums(EZ_k)
f_scale = sum(res$ql$El[,k])
length(f_seq)
fk_hat = update_smooth(f_seq, f_scale,nugget=TRUE)
res$qf$Ef[,k] = fk_hat$E
res$qf$Elogf[,k] = fk_hat$Elog
#loglikR = loglikR + fk_hat$loglik
res$nugget_f[k] = fk_hat$nugget
res$gf[[k]] = fk_hat$pi_weight
b_k_new = res$ql$Elogl[X_idx$i,k] + res$qf$Elogf[X_idx$j, k] - res$a
res$b = res$b - exp(b_k) + exp(b_k_new)
b_k_max = pmax(b_k_new, b_k_max)
res$b = res$b/exp(b_k_max)
res$a = b_k_max + res$a
KL[iter+1] = mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
library(Rfast)
mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,Tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,Tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,Tcrossprod(res$ql$El,res$qf$Ef))
res$ql$El[,k] = lk_hat$posterior$mean
res$ql$Elogl[,k] = lk_hat$posterior$mean_log
#loglikL = loglikL + lk_hat$log_likelihood
res$gl[[k]] = lk_hat$fitted_g
fit_hals = NMF_HALS(as.matrix(X),k=10,smooth_method = 'runmed',printevery = 1)
dim(fit_hals$V)
plot(fit_hals$V[1,1:42609],type='l')
plot(fit_hals$V[1,42610:42609*2],type='l')
plot(fit_hals$V[1,42609*2:42609*3],type='l')
plot(fit_hals$V[1,(42609*2):(42609*3)],type='l')
plot(fit_hals$V[1,(42609*2):(42609*3-1)],type='l')
42609*3
dim(X)
dim(Y_RNAr)
merge_len
dim(Y_H3K4r)
Y_RNAr = do.call(cbind, by(t(Y_RNA), (seq(ncol(Y_RNA)) - 1) %/% merge_len, FUN = colSums))
?NMF_HALS
paste('output/luis/',gene,'_K10_merge10base.rds')
paste('output/luis/',gene,'_K10_merge10base.rds',sep='')
ZFAND2A_K10_merge10base <- readRDS("~/SMF/output/luis/ZFAND2A_K10_merge10base.rds")
ZFAND2A_K10_merge10base$gene
ZFAND2A_K10_merge10base$merge_len
ZFAND2A_K10_merge10base$assays
ZFAND2A_K10_merge10base$fit_stm$d
dim(ZFAND2A_K10_merge10base$fit_stm$EF)
dim(ZFAND2A_K10_merge10base$fit_stm$EL)
library(stm)
library(stm)
getwd()
library(stm)
set.seed(123)
n = 120
p = 256
K= 3
FF = matrix(1, nrow=p, ncol=K)
FF[(p/8*1):(p/8*2),1] = 5
FF[(p/8*3):(p/8*4),2] = 5
FF[(p/8*5):(p/8*7),3] = 5
L = matrix(rgamma(n*K,2),ncol=K)
y = matrix(rpois(n*p,tcrossprod(L,FF)),nrow=n)
fit.sgom = cluster.mix(y,K=3,tol=1e-3,maxit = 100)
library(stm)
set.seed(123)
n = 120
p = 256
K= 3
FF = matrix(1, nrow=p, ncol=K)
FF[(p/8*1):(p/8*2),1] = 5
FF[(p/8*3):(p/8*4),2] = 5
FF[(p/8*5):(p/8*7),3] = 5
L = matrix(rgamma(n*K,2),ncol=K)
y = matrix(rpois(n*p,tcrossprod(L,FF)),nrow=n)
fit.sgom = cluster.mix(y,K=3,tol=1e-3,maxit = 100)
fit.sgom = cluster.mix(y,K=3,tol=1e-3,maxit = 100,nugget = T)
library(stm)
library(stm)
set.seed(123)
n = 120
p = 256
K= 3
FF = matrix(1, nrow=p, ncol=K)
FF[(p/8*1):(p/8*2),1] = 5
FF[(p/8*3):(p/8*4),2] = 5
FF[(p/8*5):(p/8*7),3] = 5
L = matrix(rgamma(n*K,2),ncol=K)
y = matrix(rpois(n*p,tcrossprod(L,FF)),nrow=n)
fit.sgom = cluster.mix(y,K=3,tol=1e-3,maxit = 100,nugget = T)
ploter = function(EF,main){
par(mfrow=c(3,1))
for(k in 1:ncol(EF)){
plot(EF[,k],ylab=paste('f',k,sep=''),main=ifelse(k==1,main,""),type='l')
}
}
ploter(fit.sgom,main='sgom')
ploter(t(fit.sgom$phi),main='sgom')
library(NNLM)
?nnmf
nnmf
View(nnmf)
reformat.input
set.seed(123)
n = 120
p = 256
K= 3
FF = matrix(1, nrow=p, ncol=K)
FF[(p/8*1):(p/8*2),1] = 5
FF[(p/8*3):(p/8*4),2] = 5
FF[(p/8*5):(p/8*7),3] = 5
L = matrix(rgamma(n*K,2),ncol=K)
y = matrix(rpois(n*p,tcrossprod(L,FF)),nrow=n)
plot(y[1,])
plot(FF[,1])
plot(FF[,2])
plot(FF[,3])
X_init_fit = nnmf(y,K=3,method='lee',
loss='mkl',show.warning = F,
init = list(W=matrix(runif(n*K),ncol=K),H=t(FF))
verbose = F,max.iter = 10)
X_init_fit = nnmf(y,K=3,method='lee',
loss='mkl',show.warning = F,
init = list(W=matrix(runif(n*K),ncol=K),H=t(FF)),
verbose = F,max.iter = 10)
X_init_fit = nnmf(y,3,method='lee',
loss='mkl',show.warning = F,
init = list(W=matrix(runif(n*K),ncol=K),H=t(FF)),
verbose = F,max.iter = 10)
X_init_fit$H
plot(X_init_fit$H[1,])
plot(X_init_fit$H[1,],type='l')
plot(X_init_fit$H[2,],type='l')
plot(X_init_fit$H[3,],type='l')
X_init_fit = nnmf(y,3,method='lee',
loss='mkl',show.warning = F,
init = list(W=matrix(runif(n*K),ncol=K),H=t(FF)),
verbose = F,max.iter = 1)
plot(X_init_fit$H[1,],type='l')
plot(X_init_fit$H[2,],type='l')
plot(X_init_fit$H[3,],type='l')
plot(L[,1])
plot(L[,2])
plot(L[,3])
plot(X_init_fit$W[,1])
plot(X_init_fit$W[,2])
plot(X_init_fit$W[,3])
plot(L[,3])
X_init_fit = nnmf(y,3,method='lee',
loss='mkl',show.warning = F,
init = list(W=matrix(runif(n*K),ncol=K),H=t(FF)),
verbose = F,max.iter = 50)
plot(X_init_fit$W[,3])
plot(X_init_fit$W[,1])
plot(X_init_fit$H[1,])
plot(X_init_fit$H[2,])
plot(X_init_fit$H[3,])
plot(L[,3])
plot(X_init_fit$W[,3])
X_init_fit = nnmf(y,3,method='lee',
loss='mkl',show.warning = F,
init = list(W=matrix(runif(n*K),ncol=K),H=t(FF)),
verbose = F,max.iter = 1)
plot(X_init_fit$H[1,])
plot(X_init_fit$H[2,])
plot(X_init_fit$H[3,])
plot(X_init_fit$W[,1])
plot(X_init_fit$W[,3])
plot(L[,3])
X_init_fit = nnmf(y,3,method='lee',
loss='mkl',show.warning = F,
init = list(W=matrix(runif(n*K),ncol=K),H=t(FF)),
verbose = F,max.iter = 100)
plot(X_init_fit$H[1,])
plot(X_init_fit$H[2,])
plot(X_init_fit$H[3,])
plot(X_init_fit$W[,3])
plot(L[,3])
X_init_fit = nnmf(y,3,method='lee',
loss='mkl',show.warning = F,
init = list(W=matrix(runif(n*K),ncol=K),H=t(FF)),
verbose = F,max.iter = 50)
plot(X_init_fit$H[3,])
plot(X_init_fit$H[2,])
plot(X_init_fit$H[1,])
plot(X_init_fit$W[,3])
plot(L[,3])
X_init_fit = nnmf(y,3,method='lee',
loss='mkl',show.warning = F,
init = list(W=matrix(runif(n*K),ncol=K),H=t(FF)),
verbose = F,max.iter = 10)
plot(X_init_fit$H[3,])
plot(X_init_fit$H[2,])
plot(X_init_fit$H[1,])
plot(X_init_fit$W[,1])
plot(X_init_fit$W[,2])
plot(X_init_fit$W[,3])
plot(L[,3])
plot(X_init_fit$W[,3]/summary(X_init_fit$W[,3]))
plot(X_init_fit$W[,3]/sum(X_init_fit$W[,3]))
plot(L[,3]/sum(L[,3]))
X_init_fit = nnmf(y,3,method='lee',
loss='mkl',show.warning = F,
init = list(H=t(FF)),
verbose = F,max.iter = 10)
plot(X_init_fit$H[1,])
plot(X_init_fit$H[2,])
plot(X_init_fit$H[3,])
plot(X_init_fit$W[,1])
plot(X_init_fit$W[,2])
plot(X_init_fit$W[,3]/sum(X_init_fit$W[,3]))
plot(L[,3]/sum(L[,3]))
plot(X_init_fit$W[,3]/sum(X_init_fit$W[,3]))
plot(L[,3]/sum(L[,3]))
X_init_fit = nnmf(y,3,method='lee',
loss='mkl',show.warning = F,
init = list(H=t(FF)),
verbose = F,max.iter = 10)
plot(X_init_fit$H[1,])
X_init_fit = nnmf(y,3,method='lee',
loss='mkl',show.warning = F,
init = list(H=t(FF)),
verbose = F,max.iter = 10)
plot(X_init_fit$H[1,])
X_init_fit = nnmf(y,3,method='lee',
loss='mkl',show.warning = F,
init = list(H=t(FF)),
verbose = F,max.iter = 10)
plot(X_init_fit$H[1,])
X_init_fit = nnmf(y,3,method='lee',
loss='mkl',show.warning = F,
init = list(H=t(FF)),
verbose = F,max.iter = 10)
plot(X_init_fit$H[1,])
plot(X_init_fit$H[2,])
plot(X_init_fit$H[3,])
plot(X_init_fit$W[,3]/sum(X_init_fit$W[,3]))
plot(L[,3]/sum(L[,3]))
X_init_fit = nnmf(y,3,method='scd',
loss='mkl',show.warning = F,
init = list(H=t(FF)),
verbose = F,max.iter = 10)
plot(X_init_fit$H[1,])
plot(X_init_fit$H[2,])
plot(X_init_fit$H[3,])
plot(X_init_fit$W[,1])
plot(X_init_fit$W[,2])
plot(X_init_fit$W[,3]/sum(X_init_fit$W[,3]))
X_init_fit = nnmf(y,3,method='scd',
loss='mse',show.warning = F,
init = list(H=t(FF)),
verbose = F,max.iter = 10)
plot(X_init_fit$H[1,])
plot(X_init_fit$H[2,])
plot(X_init_fit$H[3,])
plot(X_init_fit$W[,1])
plot(X_init_fit$W[,2])
plot(X_init_fit$W[,3]/sum(X_init_fit$W[,3]))
plot(L[,3]/sum(L[,3]))
X_init_fit = nnmf(y,3,method='scd',
loss='mse',show.warning = F,
init = list(H=t(FF)),
verbose = F,max.iter = 10)
plot(X_init_fit$H[1,])
plot(X_init_fit$H[2,])
plot(X_init_fit$H[3,])
plot(X_init_fit$W[,1])
plot(X_init_fit$W[,2])
plot(X_init_fit$W[,3]/sum(X_init_fit$W[,3]))
plot(L[,3]/sum(L[,3]))
X_init_fit = nnmf(y,3,method='scd',
loss='mse',show.warning = F,
init = list(H=t(FF)),
verbose = F,max.iter = 10)
plot(X_init_fit$H[1,])
plot(X_init_fit$H[2,])
plot(X_init_fit$H[3,])
plot(X_init_fit$W[,1])
plot(X_init_fit$W[,2])
plot(X_init_fit$W[,3]/sum(X_init_fit$W[,3]))
plot(L[,3]/sum(L[,3]))
X_init_fit = nnmf(y,3,method='lee',
loss='mse',show.warning = F,
init = list(H=t(FF)),
verbose = F,max.iter = 50)
plot(X_init_fit$H[1,])
plot(X_init_fit$H[2,])
plot(X_init_fit$H[3,])
plot(X_init_fit$W[,1])
plot(X_init_fit$W[,2])
plot(X_init_fit$W[,3]/sum(X_init_fit$W[,3]))
plot(L[,3]/sum(L[,3]))
library(Matrx)
library(Matrix)
normalize
normalize=function(x){
#if(sum(abs(x))!=0){
return(x/sum(x))
#}else{
#  return(rep(0,length(x)))
#}
}
library(stm)
out = stm(y,K=3,init='kmeans')
out = stm(y,K=3,init='lee')
temp = init_stm(y,3,init='kmeans')
kmeans.init=kmeans(as.matrix(X),3,nstart=5)
kmeans.init=kmeans(as.matrix(y),3,nstart=5)
rep(1,n)%o%normalize(as.vector(table(kmeans.init$cluster)))
table(kmeans.init$cluster)
kmeans.init$centers
t(kmeans.init$centers)
library(stm)
out = stm(y,K=3,init='kmeans')
out$d
out$EL
plot(out$EF[,1])
plot(out$EF[,2])
plot(out$EF[,3])
out = stm(y,K=3,init='kmeans')
plot(out$EF[,3])
plot(out$EF[,2])
plot(out$EF[,2],type='l')
plot(out$EF[,1],type='l')
out = cluster.mix(y)
out = cluster.mix(y,K=3,tol=1e-3,maxit=100)
plot(out$phi[,2])
plot(out$phi[1,]type='l')
plot(out$phi[1,],type='l')
plot(out$phi[2,],type='l')
plot(out$phi[3,],type='l')
out2 = cluster.mix(y,K=3,tol=1e-3,maxit=100,nugget = T)
plot(out$phi[1,],type='l')
plot(out$phi[2,],type='l')
plot(out$phi[3,],type='l')
out = stm(y,K=3,init='kmeans',nugget = T)
plot(out2$phi[1,],type='l')
plot(out2$phi[2,],type='l')
plot(out2$phi[3,],type='l')
out = stm(y,K=3,init='kmeans',nugget = T)
plot(out$phi[1,],type='l')
plot(out$EF[,1],type='l')
plot(out$EF[,2],type='l')
plot(out$EF[,3],type='l')
out = stm(y,K=3,init=list(L_init=NULL,F_init=FF),fix_F = T,nugget = F)
plot(out$EF[,1])
plot(out$EF[,2])
plot(out$EF[,3])
plot(out$EL[,1])
plot(out$EL[,2])
plot(out$EL[,3])
plot(out$EL[,3])
plot(out$EL[,2])
plot(out$EL[,1])
plot(L[,1])
plot(L[,3])
plot(out$EL[,3])
out = stm(y,K=3,init=list(L_init=NULL,F_init=FF),fix_F = T,nugget = F,printevery = 1)
out = stm(y,K=3,init=list(L_init=NULL,F_init=FF),fix_F = T,nugget = F,printevery = 1,tol = 1e-)
out = stm(y,K=3,init=list(L_init=NULL,F_init=FF),fix_F = T,nugget = F,printevery = 1,tol = 1e-5)
out = stm(y,K=3,init=list(L_init=NULL,F_init=FF),fix_F = T,nugget = F,printevery = 1,tol = 1e-6)
plot(L[,3])
plot(out$EL[,3])
plot(out$EL[,3]/sum(out$EL[,3]))
rmse(out$EL[,3],L[,3])
sum(out$EL[,3])
sum(out$EF[,1])
dim(FF)
dim(L)
LL = FF
y = matrix(rpois(p*p,tcrossprod(LL,FF)),nrow=p)
plot(y[1,])
dim(y)
out = stm(y,K=3,init=list(L_init=NULL,F_init=FF),fix_F = T,nugget = F,printevery = 1,tol = 1e-6)
plot(out$EL[,1])
plot(out$EL[,2])
plot(out$EL[,3])
source('~/stm/R/stm.R')
out = stm(y,K=3,init=list(L_init=NULL,F_init=FF),fix_F = T,nugget = F,printevery = 1,tol = 1e-6)
plot(out$EL[,1,type='l'])
plot(out$EL[,1],type='l'])
plot(out$EL[,1],type='l')
out = stm(y,K=3,init=list(L_init=LL,F_init=FF),fix_F = T,nugget = F,printevery = 1,tol = 1e-6)
plot(out$EL[,1],type='l')
plot(out$EL[,2],type='l')
plot(out$EL[,3],type='l')
out = stm(y,K=3,init=list(L_init=LL,F_init=FF),fix_F = F,nugget = F,printevery = 1,tol = 1e-6)
plot(out$EL[,1],type='l')
plot(out$EL[,2],type='l')
plot(out$EL[,3],type='l')
plot(out$EF[,1],type='l')
plot(out$EF[,2],type='l')
plot(out$EF[,3],type='l')
version
version
getwd()
library(smashr)
library(smashr)
version
library(reticulate)
py_config()
?py_config
py_discover_config()
py_config()
py_config()
?use_python
use_python('/software/python-anaconda-2020.02-el7-x86_64/bin/python')
py_config()
py_available()
Sys.which("python")
use_python('/software/python-anaconda-2020.02-el7-x86_64/bin/python')
os <- import("os")
os$listdir(".")
