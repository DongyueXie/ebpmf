#   qf = list(Ef = F_init, Elogf = Elogf, Esmooth_f=F_init)
# }else{
#   qf = list(Ef = F_init, Elogf = Elogf, Esmooth_f=NULL)
# }
# a = 0
# b = 0
#
# X = Matrix(X,sparse = TRUE)
# d = summary(X)
#
# temp = Elogl[d$i,] + Elogf[d$j,]
# a = rowMax(temp)
# b = rowSums(exp(temp-a))
#
gl = list()
gf = list()
ql = list(El = L_init, Elogl = Elogl, Esmooth_l=NULL)
qf = list(Ef = F_init, Elogf = Elogf, Esmooth_f=NULL)
return(list(ql=ql,
qf=qf,
gl=gl,
gf=gf,
Hl = rep(0,K),
Hf = rep(0,K)))
}
res = init_stm(X,K,init,init_loss)
EZ = array(dim = c(n,p,K))
EZ = Calc_EZ(X,K,EZ,res$ql,res$qf)
KL = c()
KL[1] = mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
KL
obj[1] = -Inf
obj = c()
obj[1] = -Inf
k = 1
# # get row and col sums of EZ_k
l_seq = rowSums(EZ[,,k])
l_scale = sum(res$qf$Ef[,k])
l_seq
plot(l_seq)
l_scale
ebpm.fn = ebpm_exponential_mixture
ebpm.fn.l = ebpm.fn
ebpm.fn.f = ebpm.fn
fit = ebpm.fn.l(l_seq,l_scale)
fit$log_likelihood
ebpm.fn.f = smashrgen::pois_smooth_split
fit = ebpm.fn.f(f_seq,f_scale)
f_seq = colSums(EZ[,,1])
f_scale = sum(res$ql$El[,1])
plot(f_seq)
library(smashr)
library(smashrgen)
?pois_smooth_split
fit = ebpm.fn.f(f_seq,f_scale)
fit$H
fit$run_time
fit$fitted_g$sigma2_trace
plot(f_seq/f_scale)
lines(fit$posterior$mean_smooth)
fit$eeee
detach("package:smashrgen", unload = TRUE)
library(smashrgen)
ebpm.fn.f = pois_smooth_split
fit$posterior$mean_smooth
temp = NULL
temp[,1] = c(1,2,3)
temp = matrix(nrow=3,ncol=2)
temp
temp[,1] = NULL
temp
devtools::load_all()
set.seed(123)
n = 120
p = 256
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
lambda = L %*% FF
X = matrix(rpois(n=length(lambda),lambda),nrow=n)
res = init_stm(X,K,'scd','mkl')
res$Hf
res$ql$El
res$ql$Elogl
res$ql$Esmooth_l
devtools::load_all()
res = init_stm(X,K,'scd','mkl')
EZ = array(dim = c(n,p,K))
EZ = Calc_EZ(X,K,EZ,res$ql,res$qf)
dim(EZ)
KL = c()
KL[1] = mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
obj = c()
obj[1] = -Inf
KL
ebpm.fn = c(ebpm_exponential_mixture,p)
library(smashrgen)
ebpm.fn = c(ebpm_exponential_mixture,pois_smooth_split)
k = 1
fix_F = F
res = stm_update_rank1(EZ[,,k],k,ebpm.fn,res,fix_F)
length(ebpm.fn)
ebpm.fn[1]
ebpm.fn[[1]]
devtools::load_all()
res = stm_update_rank1(EZ[,,k],k,ebpm.fn,res,fix_F)
res$Hl
res$Hf
res$ql$El
res$qf$Ef
plot(res$qf$Esmooth_f[,1])
plot(res$qf$Esmooth_f[,1],type='l')
k = 2
res = stm_update_rank1(EZ[,,k],k,ebpm.fn,res,fix_F)
k = 3
res = stm_update_rank1(EZ[,,k],k,ebpm.fn,res,fix_F)
plot(res$qf$Elogf[,1])
plot(res$qf$Ef[,3])
plot(res$qf$Esmooth_f[,3])
KL[iter+1] = mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
calc_stm_obj(X,K,res)
ldf = poisson_to_multinom(res$qf$Esmooth_f,res$ql$Esmooth_l)
devtools::load_all()
fit0 = ebpmf_identity(X,3,printevery = 1)
devtools::load_all()
fit0 = ebpmf_identity(X,3,printevery = 1)
plot(fit0$KL)
plot(fit0$obj,type='l')
plot(fit0$EF[,1])
plot(fit0$EF[,2])
plot(fit0$EF[,3])
fit0 = ebpmf_identity(X,3,printevery = 1,ebpm.fn = c(ebpm::ebpm_point_gamma,pois_smooth_split))
plot(fit0$EF[,1])
plot(fit0$EF[,1],type='l')
plot(fit0$EF[,2],type='l')
plot(fit0$EF[,3],type='l')
plot(fit0$obj)
devtools::load_all()
fit0 = ebpmf_identity(X,3,printevery = 1,maxiter = 1000)
plot(fit0$obj)
plot(fit0$obj,type='l')
mKL
norm(res$ql$El)
?norm
norm(res$ql$El.'F')
norm(res$ql$El,'F')
devtools::load_all()
fit0 = ebpmf_identity(X,3,printevery = 100,maxiter = 1000)
plot(fit0$obj,type='l')
plot(fit0$EF[,1])
plot(fit0$EF[,2])
plot(fit0$EF[,3])
fit0$d
fit0 = ebpmf_identity(X,3,printevery = 100,maxiter = 1000,convergence_criteria = 'Labs')
fit0$obj
devtools::load_all()
fit0 = ebpmf_identity(X,3,printevery = 100,maxiter = 1000,convergence_criteria = 'Labs')
plot(fit0$obj)
fit0 = ebpmf_identity(X,3,printevery = 1,ebpm.fn = c(ebpm::ebpm_point_gamma,pois_smooth_split),convergence_criteria = 'Labs')
plot(fit0$EF[,1],type='l')
plot(fit0$EF[,2],type='l')
plot(fit0$EF[,3],type='l')
set.seed(123)
n = 120
p = 256
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
FF = FF + matrix(rnorm(n*K,0,0.5),nrow=n)
fit0 = ebpmf_identity(X,3,printevery = 1)
plot(fit0$EF[,1])
plot(fit0$EF[,2])
plot(fit0$EF[,3])
fit1 = ebpmf_identity(X,3,printevery = 1,ebpm.fn = c(ebpm::ebpm_point_gamma,pois_smooth_split),convergence_criteria = 'Labs')
plot(fit1$EF[,1])
plot(fit1$EF[,2])
plot(fit1$EF[,3])
set.seed(123)
n = 120
p = 256
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
FF = FF + matrix(rnorm(p*K,0,1),nrow=n)
set.seed(123)
n = 120
p = 256
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
FF = FF + matrix(rnorm(p*K,0,1),nrow=p)
dim(matrix(rnorm(p*K,0,1),nrow=p))
dim(FF)
set.seed(123)
n = 120
p = 256
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
FF = FF + matrix(rnorm(p*K,0,1),ncol=p)
FF = pmax(FF,0)
lambda = L %*% FF
X = matrix(rpois(n=length(lambda),lambda),nrow=n)
fit0 = ebpmf_identity(X,3,printevery = 1)
plot(fit0$EF[,1])
plot(fit0$EF[,1],type='l')
plot(fit0$EF[,2],type='l')
plot(fit0$EF[,3],type='l')
fit1 = ebpmf_identity(X,3,printevery = 1,ebpm.fn = c(ebpm::ebpm_point_gamma,pois_smooth_split,convergence_criteria = 'Labs')
)
fit1 = ebpmf_identity(X,3,printevery = 1,ebpm.fn = c(ebpm::ebpm_point_gamma,pois_smooth_split),convergence_criteria = 'Labs')
plot(fit1$EF[,1])
plot(fit1$EF[,1],type='l')
plot(fit1$EF[,2],type='l')
plot(fit1$EF[,3],type='l')
?flash
library(stm)
a = 1:1e5
library(microbenchmark)
microbenchmark(rm(a))
warnings()
a = 1:1e5
microbenchmark(rm(a)times=1)
microbenchmark(rm(a),times=1)
a = 1:1e5
microbenchmark(rm(a),times=1)
a = 1:1e5
microbenchmark(rm(a),gc(),times=1)
a = 1:1e5
microbenchmark(rm(a),gc(),times=1)
devtools::load_all()
devtools::load_all()
set.seed(12345)
N = 1000
p = 1000
K = 2
sigma2 = 0.1
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 1
Ftrue[21:40,2] = 1
#Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
Y[Y<quantile(Y,0.98)] = 0
sum(Y==0)/prod(dim(Y))
gc()
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 3,maxiter = 3,printevery = 1,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
library(peakRAM)
gc()
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 3,maxiter = 3,printevery = 1,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
gc()
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 1,maxiter_vga = 3,maxiter = 3,printevery = 1,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
gc()
Ys=Matrix(Y,sparse = T)
peakRAM(fit <- splitting_PMF_flashier_low_memory(Ys,verbose=TRUE,n_cores = 1,maxiter_vga = 3,printevery = 1,batch_size = 1000,maxiter = 3,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
peakRAM(fit <- splitting_PMF_flashier_low_memory(Ys,verbose=TRUE,n_cores = 1,maxiter_vga = 3,printevery = 1,batch_size = 100,maxiter = 3,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
gc()
peakRAM(fit <- splitting_PMF_flashier_low_memory(Ys,verbose=TRUE,n_cores = 1,maxiter_vga = 3,printevery = 1,batch_size = 100,maxiter = 3,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
devtools::load_all()
library(stm)
devtools::load_all()
set.seed(12345)
N = 1001
p = 1000
K = 2
sigma2 = 0.1
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 1
Ftrue[21:40,2] = 1
#Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
Y[Y<quantile(Y,0.98)] = 0
sum(Y==0)/prod(dim(Y))
library(peakRAM)
gc()
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 1,maxiter_vga = 3,maxiter = 3,printevery = 1,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
gc()
Ys=Matrix(Y,sparse = T)
peakRAM(fit <- splitting_PMF_flashier_low_memory(Ys,verbose=TRUE,n_cores = 1,maxiter_vga = 3,printevery = 1,batch_size = 1000,maxiter = 3,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
library(stm)
sqrt(1e-6)
Y = 1
gc()
devtools::load_all()
set.seed(12345)
N = 1001
p = 1000
K = 2
sigma2 = 0.1
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 1
Ftrue[21:40,2] = 1
#Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
Y[Y<quantile(Y,0.98)] = 0
sum(Y==0)/prod(dim(Y))
library(peakRAM)
Ys=Matrix(Y,sparse = T)
peakRAM(fit <- splitting_PMF_flashier_low_memory(Ys,verbose=TRUE,n_cores = 1,maxiter_vga = 3,printevery = 1,batch_size = 1000,maxiter = 3,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
devtools::load_all()
Ys=Matrix(Y,sparse = T)
peakRAM(fit <- splitting_PMF_flashier_low_memory(Ys,verbose=TRUE,n_cores = 1,maxiter_vga = 3,printevery = 1,batch_size = 1000,maxiter = 3,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
library(stm)
library(stm)
rm(fit)
Ys=Matrix(Y,sparse = T)
peakRAM(fit = splitting_PMF_flashier_low_memory(Ys,verbose=TRUE,n_cores = 1,maxiter_vga = 3,printevery = 1,batch_size = 1000,maxiter = 3,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
load('/project2/mstephens/pcarbo/git/single-cell-topics/data/pbmc_purified.RData')
table(samples$celltype)
table(samples$dataset)
x = 1
cbind(cbind(x,2),3)
devtools::load_all()
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,add_greedy_Kmax = 1,add_greedy_init = 'previous_init',maxiter_vga = 2))
library(peakRAM)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,add_greedy_Kmax = 1,add_greedy_init = 'previous_init',maxiter_vga = 2))
dim(fit$sigma2_trace)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,add_greedy_Kmax = 1,add_greedy_init = 'previous_init',maxiter_vga = 2,return_sigma2_trace = T))
fit$sigma2_trace
sigma2 = NULL
sigma2[100]
devtools::load_all()
V_
V_M
View(V_M)
devtools::load_all()
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
library(peakRAM)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
library(peakRAM)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
devtools::load_all()
library(peakRAM)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
M[1:5,1:5]
V[1:5,1:5]
sigma2
devtools::load_all()
devtools::load_all()
library(peakRAM)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
devtools::load_all()
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
sigma2
devtools::load_all()
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
sigma2
M[1:5,1:5]
V[1:5,1:5]
devtools::load_all()
library(peakRAM)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
plot(fit$K_trace)
plot(fitted(fit$fit_flash),tcrossprod(Ltrue,Ftrue),col='grey80')
abline(a=0,b=1)
fit$fit_flash$pve
library(stm)
library(stm)
devtools::load_all()
library(stm)
load('/project2/mstephens/pcarbo/git/single-cell-topics/data/droplet.RData')
dim(counts)
library(stm)
?splitting_PMF_flashier_low_memory
