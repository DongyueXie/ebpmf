devtools::load_all()
fit0 = ebpmf_identity(X,3,printevery = 1)
devtools::load_all()
fit0 = ebpmf_identity(X,3,printevery = 1)
plot(fit0$KL)
plot(fit0$obj,type='l')
plot(fit0$EF[,1])
plot(fit0$EF[,2])
plot(fit0$EF[,3])
fit0 = ebpmf_identity(X,3,printevery = 1,ebpm.fn = c(ebpm::ebpm_point_gamma,pois_smooth_split))
plot(fit0$EF[,1])
plot(fit0$EF[,1],type='l')
plot(fit0$EF[,2],type='l')
plot(fit0$EF[,3],type='l')
plot(fit0$obj)
devtools::load_all()
fit0 = ebpmf_identity(X,3,printevery = 1,maxiter = 1000)
plot(fit0$obj)
plot(fit0$obj,type='l')
mKL
norm(res$ql$El)
?norm
norm(res$ql$El.'F')
norm(res$ql$El,'F')
devtools::load_all()
fit0 = ebpmf_identity(X,3,printevery = 100,maxiter = 1000)
plot(fit0$obj,type='l')
plot(fit0$EF[,1])
plot(fit0$EF[,2])
plot(fit0$EF[,3])
fit0$d
fit0 = ebpmf_identity(X,3,printevery = 100,maxiter = 1000,convergence_criteria = 'Labs')
fit0$obj
devtools::load_all()
fit0 = ebpmf_identity(X,3,printevery = 100,maxiter = 1000,convergence_criteria = 'Labs')
plot(fit0$obj)
fit0 = ebpmf_identity(X,3,printevery = 1,ebpm.fn = c(ebpm::ebpm_point_gamma,pois_smooth_split),convergence_criteria = 'Labs')
plot(fit0$EF[,1],type='l')
plot(fit0$EF[,2],type='l')
plot(fit0$EF[,3],type='l')
set.seed(123)
n = 120
p = 256
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
FF = FF + matrix(rnorm(n*K,0,0.5),nrow=n)
fit0 = ebpmf_identity(X,3,printevery = 1)
plot(fit0$EF[,1])
plot(fit0$EF[,2])
plot(fit0$EF[,3])
fit1 = ebpmf_identity(X,3,printevery = 1,ebpm.fn = c(ebpm::ebpm_point_gamma,pois_smooth_split),convergence_criteria = 'Labs')
plot(fit1$EF[,1])
plot(fit1$EF[,2])
plot(fit1$EF[,3])
set.seed(123)
n = 120
p = 256
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
FF = FF + matrix(rnorm(p*K,0,1),nrow=n)
set.seed(123)
n = 120
p = 256
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
FF = FF + matrix(rnorm(p*K,0,1),nrow=p)
dim(matrix(rnorm(p*K,0,1),nrow=p))
dim(FF)
set.seed(123)
n = 120
p = 256
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
FF = FF + matrix(rnorm(p*K,0,1),ncol=p)
FF = pmax(FF,0)
lambda = L %*% FF
X = matrix(rpois(n=length(lambda),lambda),nrow=n)
fit0 = ebpmf_identity(X,3,printevery = 1)
plot(fit0$EF[,1])
plot(fit0$EF[,1],type='l')
plot(fit0$EF[,2],type='l')
plot(fit0$EF[,3],type='l')
fit1 = ebpmf_identity(X,3,printevery = 1,ebpm.fn = c(ebpm::ebpm_point_gamma,pois_smooth_split,convergence_criteria = 'Labs')
)
fit1 = ebpmf_identity(X,3,printevery = 1,ebpm.fn = c(ebpm::ebpm_point_gamma,pois_smooth_split),convergence_criteria = 'Labs')
plot(fit1$EF[,1])
plot(fit1$EF[,1],type='l')
plot(fit1$EF[,2],type='l')
plot(fit1$EF[,3],type='l')
?flash
library(stm)
a = 1:1e5
library(microbenchmark)
microbenchmark(rm(a))
warnings()
a = 1:1e5
microbenchmark(rm(a)times=1)
microbenchmark(rm(a),times=1)
a = 1:1e5
microbenchmark(rm(a),times=1)
a = 1:1e5
microbenchmark(rm(a),gc(),times=1)
a = 1:1e5
microbenchmark(rm(a),gc(),times=1)
devtools::load_all()
devtools::load_all()
set.seed(12345)
N = 1000
p = 1000
K = 2
sigma2 = 0.1
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 1
Ftrue[21:40,2] = 1
#Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
Y[Y<quantile(Y,0.98)] = 0
sum(Y==0)/prod(dim(Y))
gc()
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 3,maxiter = 3,printevery = 1,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
library(peakRAM)
gc()
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 3,maxiter = 3,printevery = 1,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
gc()
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 1,maxiter_vga = 3,maxiter = 3,printevery = 1,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
gc()
Ys=Matrix(Y,sparse = T)
peakRAM(fit <- splitting_PMF_flashier_low_memory(Ys,verbose=TRUE,n_cores = 1,maxiter_vga = 3,printevery = 1,batch_size = 1000,maxiter = 3,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
peakRAM(fit <- splitting_PMF_flashier_low_memory(Ys,verbose=TRUE,n_cores = 1,maxiter_vga = 3,printevery = 1,batch_size = 100,maxiter = 3,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
gc()
peakRAM(fit <- splitting_PMF_flashier_low_memory(Ys,verbose=TRUE,n_cores = 1,maxiter_vga = 3,printevery = 1,batch_size = 100,maxiter = 3,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
devtools::load_all()
library(stm)
devtools::load_all()
set.seed(12345)
N = 1001
p = 1000
K = 2
sigma2 = 0.1
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 1
Ftrue[21:40,2] = 1
#Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
Y[Y<quantile(Y,0.98)] = 0
sum(Y==0)/prod(dim(Y))
library(peakRAM)
gc()
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 1,maxiter_vga = 3,maxiter = 3,printevery = 1,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
gc()
Ys=Matrix(Y,sparse = T)
peakRAM(fit <- splitting_PMF_flashier_low_memory(Ys,verbose=TRUE,n_cores = 1,maxiter_vga = 3,printevery = 1,batch_size = 1000,maxiter = 3,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
library(stm)
sqrt(1e-6)
Y = 1
gc()
devtools::load_all()
set.seed(12345)
N = 1001
p = 1000
K = 2
sigma2 = 0.1
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 1
Ftrue[21:40,2] = 1
#Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
Y[Y<quantile(Y,0.98)] = 0
sum(Y==0)/prod(dim(Y))
library(peakRAM)
Ys=Matrix(Y,sparse = T)
peakRAM(fit <- splitting_PMF_flashier_low_memory(Ys,verbose=TRUE,n_cores = 1,maxiter_vga = 3,printevery = 1,batch_size = 1000,maxiter = 3,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
devtools::load_all()
Ys=Matrix(Y,sparse = T)
peakRAM(fit <- splitting_PMF_flashier_low_memory(Ys,verbose=TRUE,n_cores = 1,maxiter_vga = 3,printevery = 1,batch_size = 1000,maxiter = 3,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
library(stm)
library(stm)
rm(fit)
Ys=Matrix(Y,sparse = T)
peakRAM(fit = splitting_PMF_flashier_low_memory(Ys,verbose=TRUE,n_cores = 1,maxiter_vga = 3,printevery = 1,batch_size = 1000,maxiter = 3,vga_tol = 0.1,init_tol = 0.1,Kmax_init=2))
load('/project2/mstephens/pcarbo/git/single-cell-topics/data/pbmc_purified.RData')
table(samples$celltype)
table(samples$dataset)
x = 1
cbind(cbind(x,2),3)
devtools::load_all()
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,add_greedy_Kmax = 1,add_greedy_init = 'previous_init',maxiter_vga = 2))
library(peakRAM)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,add_greedy_Kmax = 1,add_greedy_init = 'previous_init',maxiter_vga = 2))
dim(fit$sigma2_trace)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,add_greedy_Kmax = 1,add_greedy_init = 'previous_init',maxiter_vga = 2,return_sigma2_trace = T))
fit$sigma2_trace
sigma2 = NULL
sigma2[100]
devtools::load_all()
V_
V_M
View(V_M)
devtools::load_all()
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
library(peakRAM)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
library(peakRAM)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
devtools::load_all()
library(peakRAM)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
M[1:5,1:5]
V[1:5,1:5]
sigma2
devtools::load_all()
devtools::load_all()
library(peakRAM)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
devtools::load_all()
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
sigma2
devtools::load_all()
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
sigma2
M[1:5,1:5]
V[1:5,1:5]
devtools::load_all()
library(peakRAM)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0.25
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 3
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 1
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
peakRAM(fit <- splitting_PMF_flashier(Y,verbose=TRUE,n_cores = 10,maxiter_vga = 10))
plot(fit$K_trace)
plot(fitted(fit$fit_flash),tcrossprod(Ltrue,Ftrue),col='grey80')
abline(a=0,b=1)
fit$fit_flash$pve
library(stm)
library(stm)
devtools::load_all()
library(stm)
load('/project2/mstephens/pcarbo/git/single-cell-topics/data/droplet.RData')
dim(counts)
library(stm)
?splitting_PMF_flashier_low_memory
devtools::load_all()
install.packages("Rfast")
install.packages('RcppGSL')
install.packages('RcppGSL')
install.packages("Rfast")
install.packages("fastTopics")
devtools::load_all()
?ebpmf_log
library(ebpmf)
set.seed(123)
n = 120
p = 300
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
FF = FF + matrix(rnorm(p*K,0,1),ncol=p)
FF = pmax(FF,0)
lambda = L %*% FF
X = matrix(rpois(n=length(lambda),lambda),nrow=n)
fit1 = ebpmf_identity(X,K)
outpur_default
smash_dwt
smash_dwt
smashrgen::smash_dwt
smashrgen::ebps_smooth_control_default
set.seed(123)
n = 120
p = 300
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
FF = FF + matrix(rnorm(p*K,0,1),ncol=p)
FF = pmax(FF,0)
lambda = L %*% FF
X = matrix(rpois(n=length(lambda),lambda),nrow=n)
fit1 = ebpmf_identity(X,K)
ebps_smooth_control_default
smashrgen::ebps_smooth_control_default
library(smashrgen)
?smash_dwt
temp = smash_dwt(rep(1,32),1)
ebnm_params_default()
smashrgen::ebnm_params_default()
smashrgen::dwt.fn():ebnm_params_default()
smashrgen:::ebnm_params_default()
smashrgen:::ebnm_params_default
smashrgen:::ebnm_params_default_plr()
smashrgen:::ebnm_params_default_plr
library(ebpmf)
library(peakRAM)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 1
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 3
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
sum(Y!=0)/prod(dim(Y))
peakRAM(fit <- ebpmf_log(Y,l0=0,f0=0,
flash_control=list(fix_f0=T),
init_control=list(log_init_for_non0y=T,flash_est_sigma2=T)))
fit$fit_flash$F_pm
fit$fit_flash$L_pm
library(ebpmf)
library(ebpmf)
?ebpmf_log
library(ebpmf)
ebpmf:::ebpmf_log_vga_control_default
ebpmf:::ebpmf_log_init_control_default
ebpmf:::ebpmf_log_general_control_default
ebpmf:::ebpmf_log_flash_control_default
library(flashier)
?flash_greedy_init_default
?flash
?flash_greedy
ebpmf:::ebpmf_log_sigma2_control_default
library(ebpmf)
set.seed(12345)
N = 1000
p = 100
K = 3
sigma2 = 0
Ftrue = matrix(0,nrow=p,ncol=K)
Ftrue[1:20,1] = 1
Ftrue[21:40,2] = 2
Ftrue[41:60,3] = 3
Ltrue = matrix(rnorm(N*K), ncol=K)
# test
Lambda = exp(tcrossprod(Ltrue,Ftrue) + matrix(rnorm(N*p,0,sqrt(sigma2)),nrow=N))
Y = matrix(rpois(N*p,Lambda),nrow=N,ncol=p)
sum(Y!=0)/prod(dim(Y))
fit <- ebpmf_log(Y,l0=0,f0=0,flash_control=list(fix_f0=T))
plot(fit$K_trace)
fit$fit_flash$pve
for(k in 1:fit$fit_flash$n_factors){
plot(fit$fit_flash$F_pm[,k],type='l')
}
fit <- ebpmf_log(Y,l0=0,f0=0,flash_control=list(fix_f0=T),general_control = list(save_latent_M=TRUE))
fit$fit_flash$flash_fit$Y[1:5,1:5]
fit <- ebpmf_log(Y,l0=0,f0=0,flash_control=list(fix_f0=T),general_control = list(save_latent_M=F))
fit$fit_flash$flash_fit$Y[1:5,1:5]
library(ebpmf)
resid = fit$fit_flash$flash_fit$Y - tcrossprod(fit$fit_flash$L_pm,fit$fit_flash$F_pm)
fit <- ebpmf_log(Y,l0=0,f0=0,flash_control=list(fix_f0=T),general_control = list(save_latent_M=TRUE))
resid = fit$fit_flash$flash_fit$Y - tcrossprod(fit$fit_flash$L_pm,fit$fit_flash$F_pm)
resid[1;5,1:5]
resid[1:5,1:5]
flashier:::residuals.flash(fit$fit_flash)
flashier:::residuals.flash(fit$fit_flash)[1:5,1:5]
resid[1:5,1:5]
