X = Matrix(X,sparse = TRUE)
d = summary(X)
for(k in 1:K){
b_k = Elogl[d$i,k] + Elogf[d$j,k]
a = pmax(b_k,a)
b = b + b_k
}
b
pmax
?pmax
?pmax
pmax(cbind(c(1,2,3),c(2,3,4),c(3,4,5)))
cbind(c(1,2,3),c(2,3,4),c(3,4,5))
pmax(cbind(c(1,2,3),c(2,3,4),c(3,4,5)))
as.data.frame(cbind(c(1,2,3),c(2,3,4),c(3,4,5)))
pmax(as.data.frame(cbind(c(1,2,3),c(2,3,4),c(3,4,5))))
pmax.int(as.data.frame(cbind(c(1,2,3),c(2,3,4),c(3,4,5))))
rowMax = function(X){
do.call(pmax.int, c(na.rm = TRUE, as.data.frame(x)))
}
rowMax(do.call(pmax.int, c(na.rm = na.rm, as.data.frame(x))))
rowMax(cbind(c(1,2,3),c(2,3,4),c(3,4,5))))
rowMax(cbind(c(1,2,3),c(2,3,4),c(3,4,5)))
rowMax = function(X){
do.call(pmax.int, c(na.rm = TRUE, as.data.frame(X)))
}
rowMax(cbind(c(1,2,3),c(2,3,4),c(3,4,5)))
temp = Elogl[d$i,] + Elogf[d$j,]
a = rowMax(temp)
a
b = rowSums(exp(temp-a))
ql = list(El = L_init, Elogl = Elogl)
qf = list(Ef = F_init, Elogf = Elogf)
gl = list()
gf = list()
#'@description initialize the stm model
#'@param X input data matrix
#'@param K number of topics
#'@param init init methods, or a list of init L and F
#'@param init_loss mkl or mse
init_stm = function(X,K,init,init_loss){
if(is.list(init)){
L_init = init$L_init
F_init = init$F_init
}else{
if(init == 'scd'){
X_init_fit = NNLM::nnmf(as.matrix(X),K,method='scd',loss=init_loss,show.warning = F,verbose = F,max.iter = 50)
L_init = X_init_fit$W
F_init = t(X_init_fit$H)
}
if(init == 'lee'){
X_init_fit = NNLM::nnmf(as.matrix(X),K,method='lee',loss=init_loss,show.warning = F,verbose = F,max.iter = 100)
L_init = X_init_fit$W
F_init = t(X_init_fit$H)
}
if(init == 'uniform'){
L_init = matrix(runif(n*K),nrow=n,ncol=K)
F_init = matrix(runif(K*p),nrow=p,ncol=K)
ratio = median(X)/(median(L_init)*median(F_init))
L_init = L_init*sqrt(ratio)
F_init = F_init*sqrt(ratio)
}
}
# adjust scale of L and F, mainly for stability.
ratio = adjLF(L_init,F_init)
L_init = ratio$L_init
F_init = ratio$F_init
Elogl = log(L_init+1e-10)
Elogf = log(F_init+1e-10)
ql = list(El = L_init, Elogl = Elogl)
qf = list(Ef = F_init, Elogf = Elogf)
a = 0
b = 0
X = Matrix(X,sparse = TRUE)
d = summary(X)
temp = Elogl[d$i,] + Elogf[d$j,]
a = rowMax(temp)
b = rowSums(exp(temp-a))
gl = list()
gf = list()
return(list(ql=ql,qf=qf,gl=gl,gf=gf,a=a,b=b))
}
inited = init_stm(X,2,init='lee',init_loss='mkl')
res = init_stm(X,2,init='lee',init_loss='mkl')
res$b
res$a
k = 1
# get row and col sums of EZ_k
b_k = res$ql$Elogl[X_idx$i,k]+res$ql$Elogf[X_idx$j,k] - res$a
EZ_k = sparseMatrix(i=X_idx$i,j=X_idx$j,x = X_idx$x*exp(b_k)/res$b,dims = c(n,p))
exp(b_k)/res$b
b_k
res$a
res$ql$Elogl[X_idx$i,k]
res$ql$Elogf[X_idx$j,k]
dim(res$ql$Elogf)
res$ql$Elogf
# get row and col sums of EZ_k
b_k = res$ql$Elogl[X_idx$i,k]+res$qf$Elogf[X_idx$j,k] - res$a
# get row and col sums of EZ_k
b_k = res$ql$Elogl[X_idx$i,k]+res$qf$Elogf[X_idx$j,k] - res$a
EZ_k = sparseMatrix(i=X_idx$i,j=X_idx$j,x = X_idx$x*exp(b_k)/res$b,dims = c(n,p))
EZ_k
l_seq = rowSums(EZ_k)
l_seq
plot(l_seq)
l_scale = sum(res$qf$Ef[,k])
l_scale
res = init_stm(X,K,init,init_loss)
5%%2
10%%2
10%%Inf
?ebpm_point_gamma
?modifyList
source('~/stm/R/stm.R')
set.seed(123)
n = 120
p = 300
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
lambda = L %*% FF
X = matrix(rpois(n=length(lambda),lambda),nrow=n)
image(X)
plot(L[,1])
plot(L[,2])
plot(L[,3])
plot(FF[,1])
plot(FF[1,])
plot(FF[2,])
plot(FF[3,])
fit_smooth = stm(X,K,smooth_l = FALSE,smooth_f = TRUE)
mKL
L = matrix(0, nrow=n, ncol=K)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
plot(L[,1])
plot(L[,3])
plot(L[,4])
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
lambda = L %*% FF
X = matrix(rpois(n=length(lambda),lambda),nrow=n)
image(X)
plot(X[,1])
plot(X[1,])
plot(X[2,])
plot(X[20,])
plot(X[50,])
set.seed(123)
n = 120
p = 300
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
lambda = L %*% FF
X = matrix(rpois(n=length(lambda),lambda),nrow=n)
fit_smooth = stm(X,K,smooth_l = FALSE,smooth_f = TRUE)
init = 'lee';init_loss = 'mkl';maxiter=100;tol=1e-2
res = init_stm(X,K,init,init_loss)
inited = list(L_init = res$ql$El,F_init = res$qf$Ef)
KL = c()
KL[1] = mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
KL
X = Matrix::Matrix(X,sparse = TRUE)
X
X_idx = summary(X)
length(X_idx$i)
b_k_max = 0
k = 1
# get row and col sums of EZ_k
b_k = res$ql$Elogl[X_idx$i,k]+res$qf$Elogf[X_idx$j,k] - res$a
b_k
EZ_k = sparseMatrix(i=X_idx$i,j=X_idx$j,x = X_idx$x*exp(b_k)/res$b,dims = c(n,p))
EZ_k
l_seq = rowSums(EZ_k)
l_scale = sum(res$qf$Ef[,k])
l_seq
plot(l_seq)
l_scale
lk_hat = update_nsmooth(l_seq,l_scale)
source('~/stm/R/stm.R')
fit_smooth = stm(X,K,smooth_l = FALSE,smooth_f = TRUE)
fit_smooth = stm(X,K,smooth_l = FALSE,smooth_f = TRUE)
source('~/stm/R/stm.R')
fit_smooth = stm(X,K,smooth_l = FALSE,smooth_f = TRUE)
res$ql$El
res$qf$Ef
tcrossprod(res$ql$El,res$qf$Ef)
dim(tcrossprod(res$ql$El,res$qf$Ef))
image(tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
A = X;B = tcrossprod(res$ql$El,res$qf$Ef)
sum(B==0)
D = A*log(A/B)-A+B
is.nan(D)
mean(D)
D
dim(D)
image(D)
mean(D,na.rm=T)
D[,1]
B[,1]
A[,1]
Matrix::mean(D)
Matrix::mean(D,na.rm=T)
class(A)
class(B)
class(A)=='matrix'
Matrix::MatrixClass(A)
d = summary(A)
aba[d$i,d$j]
b[d$i,d$j]
B[d$i,d$j]
source('~/stm/R/mKL.R')
source('~/stm/R/stm.R')
fit = stm(X,K)
fit = stm(X,K,printevery = 1)
plot(fit$EF[,1])
plot(fit$EF[,1],type='l')
plot(fit$EF[,2],type='l')
fit = stm(X,K,printevery = 1,tol='1e-4')
plot(fit$EF[,1],type='l')
fit = stm(X,K,printevery = 1,tol='1e-5')
tol
fit = stm(X,K,printevery = 1,tol=1e-5)
plot(fit$EF[,1],type='l')
plot(fit$EF[,2],type='l')
plot(fit$EF[,3],type='l')
fit = stm(X,K,printevery = 1,tol=1e-5,nugget = T)
plot(fit$EF[,1],type='l')
plot(fit$EF[,2],type='l')
plot(fit$EF[,3],type='l')
fit = stm(X,K,printevery = 1,tol=1e-5,nugget = F)
fit2 = NMF_HALS(X,2,smooth_method = 'runmed')
class(X)
?norm
X = as.matrix(X)
fit2 = NMF_HALS(X,2,smooth_method = 'runmed')
plot(fit2$V[,1])
plot(fit2$V[1,])
plot(fit2$V[1,],type='l')
plot(fit2$V[2,],type='l')
plot(fit2$V[4,],type='l')
fit2 = NMF_HALS(X,3,smooth_method = 'wavelet')
plot(fit2$V[1,],type='l')
plot(fit2$V[2,],type='l')
plot(fit2$V[3,],type='l')
fit2 = NMF_HALS(X,3,smooth_method = 'trendfiltering')
source('~/stm/R/NMF_HALS.R')
fit2 = NMF_HALS(X,3,smooth_method = 'trendfiltering')
temp = BMSM(X[1,])
plot
plot(X[1,])
lines(temp$E)
getwd()
library(stm)
adjLF
library(stm)
library(NNLM)
set.seed(123)
n = 120
p = 300
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
lambda = L %*% FF
X = matrix(rpois(n=length(lambda),lambda),nrow=n)
image(X)
fit_smooth = stm(X,3)
library(ebpm)
fit_smooth = stm(X,3)
plot(fit_smooth$EF[,1])
plot(fit_smooth$EF[,1],type='l')
plot(fit_smooth$EF[,2],type='l')
plot(fit_smooth$EF[,3],type='l')
source('~/stm/R/stm.R')
fit_smooth = stm(X,3,nugget = F)
plot(fit_smooth$EF[,1],type='l')
plot(fit_smooth$EF[,2],type='l')
plot(fit_smooth$EF[,3],type='l')
fit_smooth = stm(X,3,nugget = F)
plot(fit_smooth$EF[,1],type='l')
plot(fit_smooth$EF[,2],type='l')
plot(fit_smooth$EF[,3],type='l')
fit_smooth = stm(X,3,nugget = F)
plot(fit_smooth$EF[,1],type='l')
plot(fit_smooth$EF[,2],type='l')
plot(fit_smooth$EF[,3],type='l')
source('~/stm/R/stm.R')
fit_smooth = stm(X,3,nugget = F)
plot(fit_smooth$EF[,1],type='l')
plot(fit_smooth$EF[,2],type='l')
plot(fit_smooth$EF[,3],type='l')
fit_smooth = stm(X,3,nugget = F)
plot(fit_smooth$EF[,1],type='l')
plot(fit_smooth$EF[,2],type='l')
plot(fit_smooth$EF[,3],type='l')
fit_smooth = stm(X,3,nugget = F,tol='1e-4')
fit_smooth = stm(X,3,nugget = F,tol=1e-4)
plot(fit_smooth$EF[,1],type='l')
plot(fit_smooth$EF[,2],type='l')
plot(fit_smooth$EF[,3],type='l')
fit_smooth = stm(X,3,nugget = T,tol=1e-4)
plot(fit_smooth$EF[,1],type='l')
plot(fit_smooth$EF[,2],type='l')
plot(fit_smooth$EF[,3],type='l')
files = list.files('/project2/mstephens/dongyue/luis/luis')
files
strsplit(files[1])
strsplit(files[1],split = '_')
genes = c()
for(i in 1:length(files)){
genes = strsplit(files[i],split = '_')[[1]][1]
}
genes = unique(genes)
genes
genes = c()
for(i in 1:length(files)){
genes[i] = strsplit(files[i],split = '_')[[1]][1]
}
genes = unique(genes)
genes
g
library(readr)
g = 1
gene = genes[g]
paste("/project2/mstephens/dongyue/luis/luis/",gene,"_ATACseq.csv",sep='')
RNAseq = read_csv(paste("/project2/mstephens/dongyue/luis/luis/",gene,"_ATACseq.csv",sep=''))
RNAseq = read_csv(paste("/project2/mstephens/dongyue/luis/luis/",gene,"_ATACseq.csv.gz",sep=''))
RNAseq = read_csv(paste("/project2/mstephens/dongyue/luis/luis/",gene,"_RNAseq.csv.gz",sep=''))
ATACseq = read_csv(paste("/project2/mstephens/dongyue/luis/luis/",gene,"_ATACseq.csv.gz",sep=''))
H3K4seq = read_csv(paste("/project2/mstephens/dongyue/luis/luis/",gene,"_H3K4me1.csv.gz",sep=''))
gene
indis_ATAC = (colnames(ATACseq))[-c(1,2)]
indis_ATAC
indis_RNA = (colnames(RNAseq))[-c(1,2)]
indis_H3K4me1 = (colnames(H3K4mseq))[-c(1,2)]
indis_H3K4me1 = (colnames(H3K4seq))[-c(1,2)]
indis_H3K4me1
for(i in 1:length(indis_H3K4me1)){
name_i = strsplit(indis_H3K4me1[i],split = '_')[[1]]
indis_H3K4me1[i] = paste(name_i[1],name_i[2],sep = '_')
}
indis = intersect(intersect(indis_ATAC,indis_RNA),indis_H3K4me1)
indis
length(indis)
Y_RNA = t(RNAseq[,match(indis,indis_RNA)+2])
Y_H3K4 = t(H3K4seq[,match(indis,indis_H3K4me1)+2])
Y_ATAC = t(ATACseq[,match(indis,indis_ATAC)+2])
dim(Y_RNA)
Y_RNAr = do.call(cbind, by(t(Y_RNA), (seq(ncol(Y_RNA)) - 1) %/% 10, FUN = colSums))
dim(Y_RNAr)
Y_RNAr = do.call(cbind, by(t(Y_RNA), (seq(ncol(Y_RNA)) - 1) %/% 11, FUN = colSums))
dim(Y_RNAr)
426090/11
dim(Y_RNA)
dim(Y_H3K4)
dim(Y_ATAC)
all.equal(c(1,2,3))
all.equal(1,2,3)
all.equal(1,2)
var(c(dim(Y_RNA)[,2],dim(Y_H3K4)[,2],dim(Y_ATAC)[,2]))
var(c(dim(Y_RNA)[2],dim(Y_H3K4)[2],dim(Y_ATAC)[2]))
var(c(ncol(Y_RNA),ncol(Y_H3K4),ncol(Y_ATAC)))
l = min(c(ncol(Y_RNA),ncol(Y_H3K4),ncol(Y_ATAC)))
l
ncol(Y_RNA)%%10
ncol(Y_RNA)%%11
by
l = ncol(Y_RNA)
l
floor(l/11)*11
Y_H3K4r = do.call(cbind, by(t(Y_H3K4), (seq(ncol(Y_H3K4)) - 1) %/% merge_len, FUN = colSums))
Y_ATACr = do.call(cbind, by(t(Y_ATAC), (seq(ncol(Y_ATAC)) - 1) %/% merge_len, FUN = colSums))
merge_len=10
Y_H3K4r = do.call(cbind, by(t(Y_H3K4), (seq(ncol(Y_H3K4)) - 1) %/% merge_len, FUN = colSums))
Y_ATACr = do.call(cbind, by(t(Y_ATAC), (seq(ncol(Y_ATAC)) - 1) %/% merge_len, FUN = colSums))
X = matrix(rpois(n=length(lambda),lambda),nrow=n)
X
X = Matrix::Matrix(X,sparse = T)
fit_smooth = stm(X,3,nugget = F,tol=1e-4)
plot(fit_smooth$EF[,1],type='l')
plot(fit_smooth$EF[,2],type='l')
plot(fit_smooth$EF[,3],type='l')
fit_smooth = stm(X,3,nugget = T,tol=1e-4)
plot(fit_smooth$EF[,1],type='l')
plot(fit_smooth$EF[,2],type='l')
plot(fit_smooth$EF[,3],type='l')
library(Matrix)
X = cbind(Y_RNAr,Y_H3K4r,Y_ATACr)
X = Matrix(X,sparse = T)
length(X@i)
1431195/prod(dim(X))
print(paste('running ',gene))
dim(X)
fit_stm = stm(X,K=10,nugget=TRUE,printevery = 10,tol=1e-4)
X = cbind(Y_RNAr,Y_H3K4r,Y_ATACr)
# fit NMF model
fit_NMF = NNLM::nnmf(X,K=10,method='scd',loss='mkl')
?nnmf
# fit NMF model
fit_NMF = NNLM::nnmf(X,k=10,method='scd',loss='mkl')
# fit NMF model
fit_NMF = NNLM::nnmf(X,k=10,method='lee',loss='mkl')
# fit NMF model
fit_NMF = NNLM::nnmf(X,k=10,method='scd',loss='mkl',max.iter = 50)
init = list(L_init = fit_NMF$W,F_init = t(fit_NMF$H))
?stm
X = Matrix(X,sparse = T)
# run stm + nugget
fit_stm = stm(X,K=10,nugget=TRUE,printevery = 1,tol=1e-4,init = init)
dim(X)
n = dim(X)[1]
p = dim(X)[2]
n
p
res = init_stm(X,K=10,init)
init_stm
KL = c()
#browser()
KL[1] = mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
KL
X_idx = summary(X)
k = 1
# get row and col sums of EZ_k
b_k = res$ql$Elogl[X_idx$i,k]+res$qf$Elogf[X_idx$j,k] - res$a
EZ_k = sparseMatrix(i=X_idx$i,j=X_idx$j,x = X_idx$x*exp(b_k)/res$b,dims = c(n,p))
l_seq = rowSums(EZ_k)
l_scale = sum(res$qf$Ef[,k])
l_seq
l_scale
lk_hat = update_nsmooth(l_seq,l_scale,ebpm_method='ebpm_point_gamma')
lk_hat = update_nsmooth(l_seq,l_scale,ebpm_method='point_gamma')
f_seq = colSums(EZ_k)
f_scale = sum(res$ql$El[,k])
length(f_seq)
fk_hat = update_smooth(f_seq, f_scale,nugget=TRUE)
res$qf$Ef[,k] = fk_hat$E
res$qf$Elogf[,k] = fk_hat$Elog
#loglikR = loglikR + fk_hat$loglik
res$nugget_f[k] = fk_hat$nugget
res$gf[[k]] = fk_hat$pi_weight
b_k_new = res$ql$Elogl[X_idx$i,k] + res$qf$Elogf[X_idx$j, k] - res$a
res$b = res$b - exp(b_k) + exp(b_k_new)
b_k_max = pmax(b_k_new, b_k_max)
res$b = res$b/exp(b_k_max)
res$a = b_k_max + res$a
KL[iter+1] = mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
library(Rfast)
mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,Tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,Tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,Tcrossprod(res$ql$El,res$qf$Ef))
res$ql$El[,k] = lk_hat$posterior$mean
res$ql$Elogl[,k] = lk_hat$posterior$mean_log
#loglikL = loglikL + lk_hat$log_likelihood
res$gl[[k]] = lk_hat$fitted_g
fit_hals = NMF_HALS(as.matrix(X),k=10,smooth_method = 'runmed',printevery = 1)
dim(fit_hals$V)
plot(fit_hals$V[1,1:42609],type='l')
plot(fit_hals$V[1,42610:42609*2],type='l')
plot(fit_hals$V[1,42609*2:42609*3],type='l')
plot(fit_hals$V[1,(42609*2):(42609*3)],type='l')
plot(fit_hals$V[1,(42609*2):(42609*3-1)],type='l')
42609*3
dim(X)
dim(Y_RNAr)
merge_len
dim(Y_H3K4r)
Y_RNAr = do.call(cbind, by(t(Y_RNA), (seq(ncol(Y_RNA)) - 1) %/% merge_len, FUN = colSums))
?NMF_HALS
paste('output/luis/',gene,'_K10_merge10base.rds')
paste('output/luis/',gene,'_K10_merge10base.rds',sep='')
ZFAND2A_K10_merge10base <- readRDS("~/SMF/output/luis/ZFAND2A_K10_merge10base.rds")
ZFAND2A_K10_merge10base$gene
ZFAND2A_K10_merge10base$merge_len
ZFAND2A_K10_merge10base$assays
ZFAND2A_K10_merge10base$fit_stm$d
dim(ZFAND2A_K10_merge10base$fit_stm$EF)
dim(ZFAND2A_K10_merge10base$fit_stm$EL)
library(stm)
library(stm)
getwd()
