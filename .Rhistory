ebpm_control_f=list()
smooth_f=TRUE
smooth_l=FALSE
nugget=FALSE
for(k in 1:K){
# Update L
l_seq = rowSums(EZ[,,k])
l_scale = sum(qf_hat$Ef[k,])
if(smooth_l){
lk_hat = update_smooth(l_seq, l_scale, nugget,bmsm_control_l,filter.number = filter.number ,family = family)
ql_hat$El[,k] = lk_hat$E
ql_hat$Elogl[,k] = lk_hat$Elog
#loglikL = loglikL + lk_hat$loglik
nugget_l[k] = lk_hat$nugget
gl_hat[[k]] = lk_hat$pi_weights
}else{
lk_hat = update_nsmooth(l_seq,l_scale,ebpm_control_l)
ql_hat$El[,k] = lk_hat$posterior$mean
ql_hat$Elogl[,k] = lk_hat$posterior$mean_log
#loglikL = loglikL + lk_hat$log_likelihood
gl_hat[[k]] = lk_hat$fitted_g
}
# Update R
f_seq = colSums(EZ[,,k])
f_scale = sum(ql_hat$El[,k])
if(smooth_f){
fk_hat = update_smooth(f_seq, f_scale,nugget,bmsm_control_f,filter.number = filter.number ,family = family)
qf_hat$Ef[k,] = fk_hat$E
qf_hat$Elogf[k,] = fk_hat$Elog
#loglikR = loglikR + fk_hat$loglik
nugget_f[k] = fk_hat$nugget
gf_hat[[k]] = fk_hat$pi_weight
}else{
fk_hat = update_nsmooth(f_seq,f_scale,ebpm_control_f)
qf_hat$Ef[k,] = fk_hat$posterior$mean
qf_hat$Elogf[k,] = fk_hat$posterior$mean_log
#loglikR = loglikR + fk_hat$log_likelihood
gf_hat[[k]] = fk_hat$fitted_g
}
}
update_nsmooth = function(x,s = 1,ebpm_control = list()){
control0 = ebpm_control_default()
if (any(!is.element(names(ebpm_control),names(control0))))
stop("Argument \"ebpm_control\" contains unknown parameter names")
control1 = modifyList(control0,ebpm_control,keep.null = TRUE)
#scale = control1$scale
#point_mass=control1$point_mass
#nullweight=control1$nullweight
#shape= control1$shape
g_init = control1$g_init
fix_g = control1$fix_g
#m = control1$m
control =  control1$control
#low = control1$low
#d = control1$d
pi0 = control$pi0
#ebpm_exp_mixture(x,s,scale,point_mass,nullweight,weight=rep(1,length(x)),
#                 g_init,fix_g,m,control,low,d,shape)
ebpm_point_gamma(x,s,g_init,fix_g,pi0,control)
}
update_smooth = function(x,sf,nugget,bmsm_control=list(),
filter.number = 1,family = "DaubExPhase"){
if(min(x) < 0){stop ("negative values in x not permitted")}
if(nugget){
fit = smash.gen.poiss(x,s=sf,filter.number=filter.number,family=family)
est = fit$lambda.est
est_log = fit$mu.est
pi_weights = NULL
nugget.est = fit$nugget.est
}else{
fit = BMSM(x,sf,bmsm_control)
est = fit$E
est_log = fit$Elog
pi_weights = fit$pi_weights
nugget.est = 0
}
#loglik = fit$loglik
results = list("E" = est,
'Elog' = est_log,
"pi_weights" = pi_weights,
#"loglik" = loglik,
"nugget" = nugget.est)
return(results)
}
for(k in 1:K){
# Update L
l_seq = rowSums(EZ[,,k])
l_scale = sum(qf_hat$Ef[k,])
if(smooth_l){
lk_hat = update_smooth(l_seq, l_scale, nugget,bmsm_control_l,filter.number = filter.number ,family = family)
ql_hat$El[,k] = lk_hat$E
ql_hat$Elogl[,k] = lk_hat$Elog
#loglikL = loglikL + lk_hat$loglik
nugget_l[k] = lk_hat$nugget
gl_hat[[k]] = lk_hat$pi_weights
}else{
lk_hat = update_nsmooth(l_seq,l_scale,ebpm_control_l)
ql_hat$El[,k] = lk_hat$posterior$mean
ql_hat$Elogl[,k] = lk_hat$posterior$mean_log
#loglikL = loglikL + lk_hat$log_likelihood
gl_hat[[k]] = lk_hat$fitted_g
}
# Update R
f_seq = colSums(EZ[,,k])
f_scale = sum(ql_hat$El[,k])
if(smooth_f){
fk_hat = update_smooth(f_seq, f_scale,nugget,bmsm_control_f,filter.number = filter.number ,family = family)
qf_hat$Ef[k,] = fk_hat$E
qf_hat$Elogf[k,] = fk_hat$Elog
#loglikR = loglikR + fk_hat$loglik
nugget_f[k] = fk_hat$nugget
gf_hat[[k]] = fk_hat$pi_weight
}else{
fk_hat = update_nsmooth(f_seq,f_scale,ebpm_control_f)
qf_hat$Ef[k,] = fk_hat$posterior$mean
qf_hat$Elogf[k,] = fk_hat$posterior$mean_log
#loglikR = loglikR + fk_hat$log_likelihood
gf_hat[[k]] = fk_hat$fitted_g
}
}
nugget_l = rep(0,K)
nugget_f = rep(0,K)
ql_hat = list(El = L_init, Elogl = log(L_init))
qf_hat = list(Ef = F_init, Elogf = log(F_init))
gl_hat = list()
gf_hat = list()
EZ = array(dim = c(n,p,K))
EZ = Calc_EZ(X,K,EZ,ql_hat,qf_hat)
for(k in 1:K){
# Update L
l_seq = rowSums(EZ[,,k])
l_scale = sum(qf_hat$Ef[k,])
if(smooth_l){
lk_hat = update_smooth(l_seq, l_scale, nugget,bmsm_control_l,filter.number = filter.number ,family = family)
ql_hat$El[,k] = lk_hat$E
ql_hat$Elogl[,k] = lk_hat$Elog
#loglikL = loglikL + lk_hat$loglik
nugget_l[k] = lk_hat$nugget
gl_hat[[k]] = lk_hat$pi_weights
}else{
lk_hat = update_nsmooth(l_seq,l_scale,ebpm_control_l)
ql_hat$El[,k] = lk_hat$posterior$mean
ql_hat$Elogl[,k] = lk_hat$posterior$mean_log
#loglikL = loglikL + lk_hat$log_likelihood
gl_hat[[k]] = lk_hat$fitted_g
}
# Update R
f_seq = colSums(EZ[,,k])
f_scale = sum(ql_hat$El[,k])
if(smooth_f){
fk_hat = update_smooth(f_seq, f_scale,nugget,bmsm_control_f,filter.number = filter.number ,family = family)
qf_hat$Ef[k,] = fk_hat$E
qf_hat$Elogf[k,] = fk_hat$Elog
#loglikR = loglikR + fk_hat$loglik
nugget_f[k] = fk_hat$nugget
gf_hat[[k]] = fk_hat$pi_weight
}else{
fk_hat = update_nsmooth(f_seq,f_scale,ebpm_control_f)
qf_hat$Ef[k,] = fk_hat$posterior$mean
qf_hat$Elogf[k,] = fk_hat$posterior$mean_log
#loglikR = loglikR + fk_hat$log_likelihood
gf_hat[[k]] = fk_hat$fitted_g
}
}
fit_stm_sg_GPX3_2 = stm(t(GPX3[,which(tissue=='GTEXAdipose')+3]),K=3,printevery = 1,maxiter = 20,nugget=TRUE,return_all = FALSE)
set.seed(seed)
set.seed(123)
ql_hat = list(El = L_init, Elogl = log(L_init))
qf_hat = list(Ef = F_init, Elogf = log(F_init))
gl_hat = list()
gf_hat = list()
EZ = array(dim = c(n,p,K))
EZ = Calc_EZ(X,K,EZ,ql_hat,qf_hat)
nugget_l = rep(0,K)
nugget_f = rep(0,K)
for(k in 1:K){
# Update L
l_seq = rowSums(EZ[,,k])
l_scale = sum(qf_hat$Ef[k,])
if(smooth_l){
lk_hat = update_smooth(l_seq, l_scale, nugget,bmsm_control_l,filter.number = filter.number ,family = family)
ql_hat$El[,k] = lk_hat$E
ql_hat$Elogl[,k] = lk_hat$Elog
#loglikL = loglikL + lk_hat$loglik
nugget_l[k] = lk_hat$nugget
gl_hat[[k]] = lk_hat$pi_weights
}else{
lk_hat = update_nsmooth(l_seq,l_scale,ebpm_control_l)
ql_hat$El[,k] = lk_hat$posterior$mean
ql_hat$Elogl[,k] = lk_hat$posterior$mean_log
#loglikL = loglikL + lk_hat$log_likelihood
gl_hat[[k]] = lk_hat$fitted_g
}
# Update R
f_seq = colSums(EZ[,,k])
f_scale = sum(ql_hat$El[,k])
if(smooth_f){
fk_hat = update_smooth(f_seq, f_scale,nugget,bmsm_control_f,filter.number = filter.number ,family = family)
qf_hat$Ef[k,] = fk_hat$E
qf_hat$Elogf[k,] = fk_hat$Elog
#loglikR = loglikR + fk_hat$loglik
nugget_f[k] = fk_hat$nugget
gf_hat[[k]] = fk_hat$pi_weight
}else{
fk_hat = update_nsmooth(f_seq,f_scale,ebpm_control_f)
qf_hat$Ef[k,] = fk_hat$posterior$mean
qf_hat$Elogf[k,] = fk_hat$posterior$mean_log
#loglikR = loglikR + fk_hat$log_likelihood
gf_hat[[k]] = fk_hat$fitted_g
}
}
EZ = Calc_EZ(X,K,EZ,ql_hat,qf_hat)
nugget_l = rep(0,K)
nugget_f = rep(0,K)
for(k in 1:K){
# Update L
l_seq = rowSums(EZ[,,k])
l_scale = sum(qf_hat$Ef[k,])
if(smooth_l){
lk_hat = update_smooth(l_seq, l_scale, nugget,bmsm_control_l,filter.number = filter.number ,family = family)
ql_hat$El[,k] = lk_hat$E
ql_hat$Elogl[,k] = lk_hat$Elog
#loglikL = loglikL + lk_hat$loglik
nugget_l[k] = lk_hat$nugget
gl_hat[[k]] = lk_hat$pi_weights
}else{
lk_hat = update_nsmooth(l_seq,l_scale,ebpm_control_l)
ql_hat$El[,k] = lk_hat$posterior$mean
ql_hat$Elogl[,k] = lk_hat$posterior$mean_log
#loglikL = loglikL + lk_hat$log_likelihood
gl_hat[[k]] = lk_hat$fitted_g
}
# Update R
f_seq = colSums(EZ[,,k])
f_scale = sum(ql_hat$El[,k])
if(smooth_f){
fk_hat = update_smooth(f_seq, f_scale,nugget,bmsm_control_f,filter.number = filter.number ,family = family)
qf_hat$Ef[k,] = fk_hat$E
qf_hat$Elogf[k,] = fk_hat$Elog
#loglikR = loglikR + fk_hat$loglik
nugget_f[k] = fk_hat$nugget
gf_hat[[k]] = fk_hat$pi_weight
}else{
fk_hat = update_nsmooth(f_seq,f_scale,ebpm_control_f)
qf_hat$Ef[k,] = fk_hat$posterior$mean
qf_hat$Elogf[k,] = fk_hat$posterior$mean_log
#loglikR = loglikR + fk_hat$log_likelihood
gf_hat[[k]] = fk_hat$fitted_g
}
}
lk_hat = update_nsmooth(l_seq,l_scale,ebpm_control_l)
lk_hat = update_nsmooth(l_seq,l_scale,ebpm_control_l)
fk_hat = update_smooth(f_seq, f_scale,nugget,bmsm_control_f,filter.number = filter.number ,family = family)
fk_hat = smash.gen.poiss(f_seq, f_scale)
nugget
nugget=TRUE
ql_hat = list(El = L_init, Elogl = log(L_init))
qf_hat = list(Ef = F_init, Elogf = log(F_init))
gl_hat = list()
gf_hat = list()
EZ = array(dim = c(n,p,K))
EZ = Calc_EZ(X,K,EZ,ql_hat,qf_hat)
for(k in 1:K){
# Update L
l_seq = rowSums(EZ[,,k])
l_scale = sum(qf_hat$Ef[k,])
if(smooth_l){
lk_hat = update_smooth(l_seq, l_scale, nugget,bmsm_control_l,filter.number = filter.number ,family = family)
ql_hat$El[,k] = lk_hat$E
ql_hat$Elogl[,k] = lk_hat$Elog
#loglikL = loglikL + lk_hat$loglik
nugget_l[k] = lk_hat$nugget
gl_hat[[k]] = lk_hat$pi_weights
}else{
lk_hat = update_nsmooth(l_seq,l_scale,ebpm_control_l)
ql_hat$El[,k] = lk_hat$posterior$mean
ql_hat$Elogl[,k] = lk_hat$posterior$mean_log
#loglikL = loglikL + lk_hat$log_likelihood
gl_hat[[k]] = lk_hat$fitted_g
}
# Update R
f_seq = colSums(EZ[,,k])
f_scale = sum(ql_hat$El[,k])
if(smooth_f){
fk_hat = update_smooth(f_seq, f_scale,nugget,bmsm_control_f,filter.number = filter.number ,family = family)
qf_hat$Ef[k,] = fk_hat$E
qf_hat$Elogf[k,] = fk_hat$Elog
#loglikR = loglikR + fk_hat$loglik
nugget_f[k] = fk_hat$nugget
gf_hat[[k]] = fk_hat$pi_weight
}else{
fk_hat = update_nsmooth(f_seq,f_scale,ebpm_control_f)
qf_hat$Ef[k,] = fk_hat$posterior$mean
qf_hat$Elogf[k,] = fk_hat$posterior$mean_log
#loglikR = loglikR + fk_hat$log_likelihood
gf_hat[[k]] = fk_hat$fitted_g
}
}
k
fk_hat = update_smooth(f_seq, f_scale,nugget,bmsm_control_f,filter.number = filter.number ,family = family)
f_scale
ql_hat$El[,k]
lk_hat$fitted_g
l_scale
plot(l_seq)
l_seq
update_nsmooth(l_seq,l_scale,ebpm_control_l)
out = ebpm_point_gamma(l_seq,l_scale)
out
library(stm)
fit_stm_sg_GPX3_2 = stm(t(GPX3[,which(tissue=='GTEXAdipose')+3]),K=3,printevery = 1,maxiter = 20,nugget=TRUE,return_all = FALSE)
nugget_l = rep(0,K)
nugget_f = rep(0,K)
for(k in 1:K){
# Update L
l_seq = rowSums(EZ[,,k])
l_scale = sum(qf_hat$Ef[k,])
if(smooth_l){
lk_hat = update_smooth(l_seq, l_scale, nugget,bmsm_control_l,filter.number = filter.number ,family = family)
ql_hat$El[,k] = lk_hat$E
ql_hat$Elogl[,k] = lk_hat$Elog
#loglikL = loglikL + lk_hat$loglik
nugget_l[k] = lk_hat$nugget
gl_hat[[k]] = lk_hat$pi_weights
}else{
lk_hat = update_nsmooth(l_seq,l_scale,ebpm_control_l)
ql_hat$El[,k] = lk_hat$posterior$mean
ql_hat$Elogl[,k] = lk_hat$posterior$mean_log
#loglikL = loglikL + lk_hat$log_likelihood
gl_hat[[k]] = lk_hat$fitted_g
}
# Update R
f_seq = colSums(EZ[,,k])
f_scale = sum(ql_hat$El[,k])
if(smooth_f){
fk_hat = update_smooth(f_seq, f_scale,nugget,bmsm_control_f,filter.number = filter.number ,family = family)
qf_hat$Ef[k,] = fk_hat$E
qf_hat$Elogf[k,] = fk_hat$Elog
#loglikR = loglikR + fk_hat$loglik
nugget_f[k] = fk_hat$nugget
gf_hat[[k]] = fk_hat$pi_weight
}else{
fk_hat = update_nsmooth(f_seq,f_scale,ebpm_control_f)
qf_hat$Ef[k,] = fk_hat$posterior$mean
qf_hat$Elogf[k,] = fk_hat$posterior$mean_log
#loglikR = loglikR + fk_hat$log_likelihood
gf_hat[[k]] = fk_hat$fitted_g
}
}
l_scale
l_seq
lk_hat = update_nsmooth(l_seq,l_scale,ebpm_control_l)
lk_hat
ebpm_point_gamma(l_seq,l_scale)
update_nsmooth
library(stm)
update_nsmooth
devtools::load_all(".")
update_nsmooth
rnorm(10)
library(stm)
update_nsmooth
View(update_nsmooth)
View(update_nsmooth)
update_nsmooth = function(x,s,ebpm_control = list()){
control0 = ebpm_control_default()
if (any(!is.element(names(ebpm_control),names(control0))))
stop("Argument \"ebpm_control\" contains unknown parameter names")
control1 = modifyList(control0,ebpm_control,keep.null = TRUE)
#scale = control1$scale
#point_mass=control1$point_mass
#nullweight=control1$nullweight
#shape= control1$shape
g_init = control1$g_init
fix_g = control1$fix_g
#m = control1$m
control =  control1$control
#low = control1$low
#d = control1$d
pi0 = control1$pi0
#ebpm_exp_mixture(x,s,scale,point_mass,nullweight,weight=rep(1,length(x)),
#                 g_init,fix_g,m,control,low,d,shape)
ebpm_point_gamma(x,s,g_init,fix_g,pi0,control)
}
fit_stm_sg_GPX3_2 = stm(t(GPX3[,which(tissue=='GTEXAdipose')+3]),K=3,printevery = 1,maxiter = 20,nugget=TRUE,return_all = FALSE)
GPX3 = read.table('~/NMF/Counts_5:150399998-150408554.txt.gz',header = TRUE)
tissues = colnames(GPX3)
tissue = c()
for(i in 4:length(tissues)){
tissue = c(tissue, (strsplit(tissues[i],split = '_')[[1]])[1])
}
fit_stm_sg_GPX3_2 = stm(t(GPX3[,which(tissue=='GTEXAdipose')+3]),K=3,printevery = 1,maxiter = 20,nugget=TRUE,return_all = FALSE)
devtools::load_all(".")
n=2^12
sigma=0.5
mu=c(rep(3,n/4), rep(5, n/4), rep(6, n/4), rep(3, n/4))
x = rpois(n,exp(mu+rnorm(n,0,sigma)))
#fit1=smash.poiss(x)
fit2=smash.gen.poiss(x)
fit2
devtools::load_all(".")
n=2^12
sigma=0.5
mu=c(rep(3,n/4), rep(5, n/4), rep(6, n/4), rep(3, n/4))
x = rpois(n,exp(mu+rnorm(n,0,sigma)))
#fit1=smash.poiss(x)
fit2=smash.gen.poiss(x)
plot(fit2)
plot(fit2$lambda.est)
fit_stm_sg_GPX3_2 = stm(t(GPX3[,which(tissue=='GTEXAdipose')+3]),K=3,printevery = 1,maxiter = 20,nugget=TRUE,return_all = FALSE)
lf = poisson2multinom(t(fit_stm_sg_GPX3_2$qf),fit_stm_sg_GPX3_2$ql)
plot(lf$FF[,1],type='l')
plot(lf$FF[,2],type='l')
plot(lf$FF[,3],type='l')
fit_stm_sg_GPX3_2$nugget
fit_stm_sg_GPX3_2 = stm(t(GPX3[,which(tissue=='GTEXAdipose')+3]),K=3,printevery = 5,maxiter = 500,nugget=TRUE,return_all = FALSE)
lf = poisson2multinom(t(fit_stm_sg_GPX3_2$qf),fit_stm_sg_GPX3_2$ql)
plot(lf$FF[,3],type='l')
plot(lf$FF[,1],type='l')
plot(lf$FF[,2],type='l')
plot(lf$FF[,1],ylim=range(lf$FF),type='l')
lines(lf$FF[,2],col=2)
lines(lf$FF[,3],col=4)
fit_stm_sg_GPX3_2 = stm(t(GPX3[,-c(1,2,3)]),K=3,printevery = 1,maxiter = 300,nugget=TRUE,return_all = FALSE)
lf = poisson2multinom(t(fit_stm_sg_GPX3_2$qf),fit_stm_sg_GPX3_2$ql)
plot(lf$FF[,1],ylim=range(lf$FF),type='l')
lines(lf$FF[,2],col=2)
lines(lf$FF[,3],col=4)
barplot(lf$L[,1])
barplot(lf$L[,2])
barplot(lf$L[,3])
PSAP = read.table('~/NMF/Counts_10:73576054-73611082.txt.gz',header = TRUE)
tissues = colnames(PSAP)
tissue = c()
for(i in 4:length(tissues)){
tissue = c(tissue, (strsplit(tissues[i],split = '_')[[1]])[1])
}
fit_stm_sg_PSAP = stm(t(PSAP[,-c(1,2,3)]),K=4,printevery = 5,maxiter = 100,nugget = TRUE,return_all = FALSE)
library(stm)
lf = poisson2multinom(t(fit_stm_sg_PSAP$qf),fit_stm_sg_PSAP$ql)
plot(lf$FF[,1],ylim=range(lf$FF),type='l')
lines(lf$FF[,2],col=2)
lines(lf$FF[,3],col=4)
fit_stm_sg_PSAP$nugget
fit_stm_sg_PSAP_10 = stm(t(PSAP[,-c(1,2,3)]),K=4,printevery = 5,maxiter = 10,nugget = TRUE,return_all = FALSE)
library(stm)
n=2^12
sigma=0.5
mu=c(rep(3,n/4), rep(5, n/4), rep(6, n/4), rep(3, n/4))
x = rpois(n,exp(mu+rnorm(n,0,sigma)))
#fit1=smash.poiss(x)
fit2=smash.gen.poiss(x)
n=2^12
sigma=0.5
mu=c(rep(3,n/4), rep(5, n/4), rep(6, n/4), rep(3, n/4))
x = rpois(n,exp(mu+rnorm(n,0,sigma)))
#fit1=smash.poiss(x)
fit2=smash.gen.poiss(x)
plot(fit2)
plot(fit2$lambda.est)
plot(fit2$lambda.est,type='l')
n=2^16
sigma=0.5
mu=c(rep(3,n/4), rep(5, n/4), rep(6, n/4), rep(3, n/4))
x = rpois(n,exp(mu+rnorm(n,0,sigma)))
#fit1=smash.poiss(x)
fit2=smash.gen.poiss(x)
2616
2^16
plot(fit2$lambda.est)
plot(fit2$mu.est,type='l')
library(wavethresh)
?wd
n=2^16
sigma=0.5
mu=c(rep(3,n/4), rep(5, n/4), rep(6, n/4), rep(3, n/4))
x = rpois(n,exp(mu+rnorm(n,0,sigma)))
#fit1=smash.poiss(x)
fit2=smash.gen.poiss(x,filter.number = 8,family = 'DaubLeAsymm')
library(ebpm)
?ebpm_two_gamma
tt = stm(t(GPX3[1:256,which(tissue=='GTEXAdipose')+3]),K=3,printevery = 5,maxiter = 30,nugget=T,return_all = FALSE)
library(stm)
tt = stm(t(GPX3[1:256,which(tissue=='GTEXAdipose')+3]),K=3,printevery = 5,maxiter = 30,nugget=T,return_all = FALSE)
tt = stm(t(GPX3[1:256,which(tissue=='GTEXAdipose')+3]),K=3,printevery = 5,maxiter = 30,nugget=T,return_all = FALSE)
tt = stm(t(GPX3[1:256,which(tissue=='GTEXAdipose')+3]),K=3,printevery = 5,maxiter = 100,nugget=T,return_all = FALSE,init='uniform')
tt = stm(t(GPX3[1:256,which(tissue=='GTEXAdipose')+3]),K=3,printevery = 5,maxiter = 500,nugget=T,return_all = FALSE,init='uniform')
plot(tt$qf[1,])
plot(tt$qf[2,])
plot(tt$qf[3,])
plot(tt$qf[3,],type='l')
plot(tt$qf[1,],type='l')
barplot(tt$ql[,1])
barplot(tt$ql[,2])
barplot(tt$ql[,3])
RPS13 = read.table('~/NMF/Counts_11:17095938-17099220.txt.gz',header = TRUE)
dim(RPS13)
tissues = colnames(RPS13)
tissue = c()
for(i in 4:length(tissues)){
tissue = c(tissue, (strsplit(tissues[i],split = '_')[[1]])[1])
}
table(tissue)
library(stm)
pwd
getwd()
library(stm)
library(ebpm)
?ebpm_point_gamma
library(stm)
init = 'scd'
is.list(init)
