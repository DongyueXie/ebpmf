plot_temp(fit1)
plot_temp = function(fit){
plot(fit$K_trace)
plot(fit$elbo_trace)
print(fit$elbo)
idx = sample(1:prod(dim(Y)),1e4)
plot(fitted(fit$fit_flash)[idx],tcrossprod(Ltrue,Ftrue)[idx],col='grey80')
abline(a=0,b=1)
print(fit$fit_flash$pve)
for(k in 1:fit$fit_flash$n.factors){
plot(fit$fit_flash$F.pm[,k],type='l')
}
}
plot_temp(fit1)
plot_temp(fit2)
plot_temp = function(fit){
plot(fit$K_trace)
plot(fit$elbo_trace)
print(fit$elbo)
idx = sample(1:prod(dim(Y)),1e4)
plot(fitted(fit$fit_flash)[idx],tcrossprod(Ltrue,Ftrue)[idx],col='grey80')
abline(a=0,b=1)
print(fit$fit_flash$pve)
for(k in 1:fit$fit_flash$n.factors){
plot(fit$fit_flash$F.pm[,k],type='l')
}
print(unlist(lapply(fit$run_time_break_down),mean))
}
plot_temp(fit2)
summary_fit = function(fit){
plot(fit$K_trace)
plot(fit$elbo_trace)
print(fit$elbo)
idx = sample(1:prod(dim(Y)),1e4)
plot(fitted(fit$fit_flash)[idx],tcrossprod(Ltrue,Ftrue)[idx],col='grey80')
abline(a=0,b=1)
print(fit$fit_flash$pve)
for(k in 1:fit$fit_flash$n.factors){
plot(fit$fit_flash$F.pm[,k],type='l')
}
print(unlist(lapply(fit$run_time_break_down,mean)))
}
summary_fit(fit1)
summary_fit(fit2)
devtools::load_all()
fit0 = splitting_PMF_flashier(Y,verbose=TRUE,
ebnm.fn = c(ebnm::ebnm_point_exponential, ebnm::ebnm_point_normal),
add_greedy_init = 'previous_init',add_greedy_Kmax = 1,
loadings_sign = 1,maxiter = 30,n_cores = 10)
maxiter_vga
# res = vga_pois_solver_mat(M,Y,S,fitted(fit_flash),adjust_var_shape(sigma2,var_type,n,p),tol=vga_tol,maxiter = maxiter_vga)
res = vga_pois_solver_mat_newton_iter(M,Y,S,fitted(fit_flash),
adjust_var_shape(sigma2,var_type,n,p),
maxiter = maxiter_vga,
tol=vga_tol)
summary_fit(fit1)
library(stm)
exp(1:20)
devtools::load_all()
fit3 = splitting_PMF_flashier(Y,verbose=TRUE,
ebnm.fn = c(ebnm::ebnm_point_exponential, ebnm::ebnm_point_normal),
add_greedy_init = 'previous_init',add_greedy_Kmax = 1,
add_greedy_every = 2,
printevery = 1,
loadings_sign = 1,maxiter = 30,n_cores = 10)
# res = vga_pois_solver_mat(M,Y,S,fitted(fit_flash),adjust_var_shape(sigma2,var_type,n,p),tol=vga_tol,maxiter = maxiter_vga)
res = vga_pois_solver_mat_newton_iter(M,Y,S,fitted(fit_flash),
adjust_var_shape(sigma2,var_type,n,p),
maxiter = maxiter_vga,
tol=vga_tol)
# res = vga_pois_solver_mat(M,Y,S,fitted(fit_flash),adjust_var_shape(sigma2,var_type,n,p),tol=vga_tol,maxiter = maxiter_vga)
res = vga_pois_solver_mat_newton_iter(M,Y,S,fitted(fit_flash),
adjust_var_shape(sigma2,var_type,n,p),
maxiter = maxiter_vga,
tol=vga_tol)
# res = vga_pois_solver_mat(M,Y,S,fitted(fit_flash),adjust_var_shape(sigma2,var_type,n,p),tol=vga_tol,maxiter = maxiter_vga)
res = vga_pois_solver_mat_newton_iter(M,Y,S,fitted(fit_flash),
adjust_var_shape(sigma2,var_type,n,p),
maxiter = maxiter_vga,
tol=vga_tol)
# res = vga_pois_solver_mat(M,Y,S,fitted(fit_flash),adjust_var_shape(sigma2,var_type,n,p),tol=vga_tol,maxiter = maxiter_vga)
res = vga_pois_solver_mat_newton_iter(M,Y,S,fitted(fit_flash),
adjust_var_shape(sigma2,var_type,n,p),
maxiter = maxiter_vga,
tol=vga_tol)
devtools::load_all()
fit3 = splitting_PMF_flashier(Y,verbose=TRUE,
ebnm.fn = c(ebnm::ebnm_point_exponential, ebnm::ebnm_point_normal),
add_greedy_init = 'previous_init',add_greedy_Kmax = 1,
add_greedy_every = 2,
printevery = 1,
loadings_sign = 1,maxiter = 30,n_cores = 10)
devtools::load_all()
fit3 = splitting_PMF_flashier(Y,verbose=TRUE,
ebnm.fn = c(ebnm::ebnm_point_exponential, ebnm::ebnm_point_normal),
add_greedy_init = 'previous_init',add_greedy_Kmax = 1,
add_greedy_every = 2,
printevery = 1,
loadings_sign = 1,maxiter = 30,n_cores = 10)
summary_fit(fit2)
summary_fit(fit3)
fit3$run_time
fit2$run_time
fit1$run_time
library(stm)
devtools::build_readme()
devtools::load_all()
?stm
set.seed(123)
n = 120
p = 256
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
lambda = L %*% FF
X = matrix(rpois(n=length(lambda),lambda),nrow=n)
#browser()
n = dim(X)[1]
p = dim(X)[2]
res = init_stm(X,K,'scd','mkl',F,F,F)
library(NNLM)
?nnmf
dim(X)
K
#'@title initialize the stm model
#'@param X input data matrix
#'@param K number of topics
#'@param init init methods, or a list of init L and F
#'@param init_loss mkl or mse
#'@importFrom NNLM nnmf
#'@export
init_stm = function(X,K,init,init_loss,maxiter_init = 50){
if(is.list(init)){
L_init = init$L_init
F_init = init$F_init
if(is.null(L_init)){
X_init_fit = nnmf(as.matrix(X),K,method='lee',
loss='mse',show.warning = F,
init = list(H=t(F_init)),
verbose = F,maxiter_init = 50)
L_init = X_init_fit$W
}
}else{
if(init%in%c('scd','lee')){
X_init_fit = NNLM::nnmf(as.matrix(X),K,method=init,loss=init_loss,show.warning = F,verbose = F,maxiter_init = 50)
L_init = X_init_fit$W
F_init = t(X_init_fit$H)
}
if(init == 'uniform'){
L_init = matrix(runif(n*K),nrow=n,ncol=K)
F_init = matrix(runif(K*p),nrow=p,ncol=K)
ratio = median(X)/(median(L_init)*median(F_init))
L_init = L_init*sqrt(ratio)
F_init = F_init*sqrt(ratio)
}
if(init == 'kmeans'){
kmeans.init=kmeans(as.matrix(X),K,nstart=5)
L_init = rep(1,n)%o%normalize(as.vector(table(kmeans.init$cluster)))
F_init = t(kmeans.init$centers)
row.names(F_init)=NULL
}
}
# adjust scale of L and F, mainly for stability.
ratio = adjLF(L_init,F_init)
L_init = ratio$L_init
F_init = ratio$F_init
Elogl = log(L_init+1e-10)
Elogf = log(F_init+1e-10)
# if(smooth_l&nugget){
#   ql = list(El = L_init, Elogl = Elogl, Esmooth_l=L_init)
# }else{
#   ql = list(El = L_init, Elogl = Elogl, Esmooth_l=NULL)
# }
# if(smooth_f&nugget){
#   qf = list(Ef = F_init, Elogf = Elogf, Esmooth_f=F_init)
# }else{
#   qf = list(Ef = F_init, Elogf = Elogf, Esmooth_f=NULL)
# }
# a = 0
# b = 0
#
# X = Matrix(X,sparse = TRUE)
# d = summary(X)
#
# temp = Elogl[d$i,] + Elogf[d$j,]
# a = rowMax(temp)
# b = rowSums(exp(temp-a))
#
gl = list()
gf = list()
ql = list(El = L_init, Elogl = Elogl, Esmooth_l=NULL)
qf = list(Ef = F_init, Elogf = Elogf, Esmooth_f=NULL)
return(list(ql=ql,
qf=qf,
gl=gl,
gf=gf,
Hl = rep(0,K),
Hf = rep(0,K)))
}
init = 'scd';
init_loss = 'mkl';
res = init_stm(X,K,init,init_loss)
#'@title initialize the stm model
#'@param X input data matrix
#'@param K number of topics
#'@param init init methods, or a list of init L and F
#'@param init_loss mkl or mse
#'@importFrom NNLM nnmf
#'@export
init_stm = function(X,K,init,init_loss,maxiter_init = 50){
if(is.list(init)){
L_init = init$L_init
F_init = init$F_init
if(is.null(L_init)){
X_init_fit = nnmf(as.matrix(X),K,method='lee',
loss='mse',show.warning = F,
init = list(H=t(F_init)),
verbose = F,max.iter = maxiter_init)
L_init = X_init_fit$W
}
}else{
if(init%in%c('scd','lee')){
X_init_fit = NNLM::nnmf(as.matrix(X),K,method=init,loss=init_loss,show.warning = F,verbose = F,max.iter = maxiter_init)
L_init = X_init_fit$W
F_init = t(X_init_fit$H)
}
if(init == 'uniform'){
L_init = matrix(runif(n*K),nrow=n,ncol=K)
F_init = matrix(runif(K*p),nrow=p,ncol=K)
ratio = median(X)/(median(L_init)*median(F_init))
L_init = L_init*sqrt(ratio)
F_init = F_init*sqrt(ratio)
}
if(init == 'kmeans'){
kmeans.init=kmeans(as.matrix(X),K,nstart=5)
L_init = rep(1,n)%o%normalize(as.vector(table(kmeans.init$cluster)))
F_init = t(kmeans.init$centers)
row.names(F_init)=NULL
}
}
# adjust scale of L and F, mainly for stability.
ratio = adjLF(L_init,F_init)
L_init = ratio$L_init
F_init = ratio$F_init
Elogl = log(L_init+1e-10)
Elogf = log(F_init+1e-10)
# if(smooth_l&nugget){
#   ql = list(El = L_init, Elogl = Elogl, Esmooth_l=L_init)
# }else{
#   ql = list(El = L_init, Elogl = Elogl, Esmooth_l=NULL)
# }
# if(smooth_f&nugget){
#   qf = list(Ef = F_init, Elogf = Elogf, Esmooth_f=F_init)
# }else{
#   qf = list(Ef = F_init, Elogf = Elogf, Esmooth_f=NULL)
# }
# a = 0
# b = 0
#
# X = Matrix(X,sparse = TRUE)
# d = summary(X)
#
# temp = Elogl[d$i,] + Elogf[d$j,]
# a = rowMax(temp)
# b = rowSums(exp(temp-a))
#
gl = list()
gf = list()
ql = list(El = L_init, Elogl = Elogl, Esmooth_l=NULL)
qf = list(Ef = F_init, Elogf = Elogf, Esmooth_f=NULL)
return(list(ql=ql,
qf=qf,
gl=gl,
gf=gf,
Hl = rep(0,K),
Hf = rep(0,K)))
}
res = init_stm(X,K,init,init_loss)
EZ = array(dim = c(n,p,K))
EZ = Calc_EZ(X,K,EZ,res$ql,res$qf)
KL = c()
KL[1] = mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
KL
obj[1] = -Inf
obj = c()
obj[1] = -Inf
k = 1
# # get row and col sums of EZ_k
l_seq = rowSums(EZ[,,k])
l_scale = sum(res$qf$Ef[,k])
l_seq
plot(l_seq)
l_scale
ebpm.fn = ebpm_exponential_mixture
ebpm.fn.l = ebpm.fn
ebpm.fn.f = ebpm.fn
fit = ebpm.fn.l(l_seq,l_scale)
fit$log_likelihood
ebpm.fn.f = smashrgen::pois_smooth_split
fit = ebpm.fn.f(f_seq,f_scale)
f_seq = colSums(EZ[,,1])
f_scale = sum(res$ql$El[,1])
plot(f_seq)
library(smashr)
library(smashrgen)
?pois_smooth_split
fit = ebpm.fn.f(f_seq,f_scale)
fit$H
fit$run_time
fit$fitted_g$sigma2_trace
plot(f_seq/f_scale)
lines(fit$posterior$mean_smooth)
fit$eeee
detach("package:smashrgen", unload = TRUE)
library(smashrgen)
ebpm.fn.f = pois_smooth_split
fit$posterior$mean_smooth
temp = NULL
temp[,1] = c(1,2,3)
temp = matrix(nrow=3,ncol=2)
temp
temp[,1] = NULL
temp
devtools::load_all()
set.seed(123)
n = 120
p = 256
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
lambda = L %*% FF
X = matrix(rpois(n=length(lambda),lambda),nrow=n)
res = init_stm(X,K,'scd','mkl')
res$Hf
res$ql$El
res$ql$Elogl
res$ql$Esmooth_l
devtools::load_all()
res = init_stm(X,K,'scd','mkl')
EZ = array(dim = c(n,p,K))
EZ = Calc_EZ(X,K,EZ,res$ql,res$qf)
dim(EZ)
KL = c()
KL[1] = mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
obj = c()
obj[1] = -Inf
KL
ebpm.fn = c(ebpm_exponential_mixture,p)
library(smashrgen)
ebpm.fn = c(ebpm_exponential_mixture,pois_smooth_split)
k = 1
fix_F = F
res = stm_update_rank1(EZ[,,k],k,ebpm.fn,res,fix_F)
length(ebpm.fn)
ebpm.fn[1]
ebpm.fn[[1]]
devtools::load_all()
res = stm_update_rank1(EZ[,,k],k,ebpm.fn,res,fix_F)
res$Hl
res$Hf
res$ql$El
res$qf$Ef
plot(res$qf$Esmooth_f[,1])
plot(res$qf$Esmooth_f[,1],type='l')
k = 2
res = stm_update_rank1(EZ[,,k],k,ebpm.fn,res,fix_F)
k = 3
res = stm_update_rank1(EZ[,,k],k,ebpm.fn,res,fix_F)
plot(res$qf$Elogf[,1])
plot(res$qf$Ef[,3])
plot(res$qf$Esmooth_f[,3])
KL[iter+1] = mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
mKL(X,tcrossprod(res$ql$El,res$qf$Ef))
calc_stm_obj(X,K,res)
ldf = poisson_to_multinom(res$qf$Esmooth_f,res$ql$Esmooth_l)
devtools::load_all()
fit0 = ebpmf_identity(X,3,printevery = 1)
devtools::load_all()
fit0 = ebpmf_identity(X,3,printevery = 1)
plot(fit0$KL)
plot(fit0$obj,type='l')
plot(fit0$EF[,1])
plot(fit0$EF[,2])
plot(fit0$EF[,3])
fit0 = ebpmf_identity(X,3,printevery = 1,ebpm.fn = c(ebpm::ebpm_point_gamma,pois_smooth_split))
plot(fit0$EF[,1])
plot(fit0$EF[,1],type='l')
plot(fit0$EF[,2],type='l')
plot(fit0$EF[,3],type='l')
plot(fit0$obj)
devtools::load_all()
fit0 = ebpmf_identity(X,3,printevery = 1,maxiter = 1000)
plot(fit0$obj)
plot(fit0$obj,type='l')
mKL
norm(res$ql$El)
?norm
norm(res$ql$El.'F')
norm(res$ql$El,'F')
devtools::load_all()
fit0 = ebpmf_identity(X,3,printevery = 100,maxiter = 1000)
plot(fit0$obj,type='l')
plot(fit0$EF[,1])
plot(fit0$EF[,2])
plot(fit0$EF[,3])
fit0$d
fit0 = ebpmf_identity(X,3,printevery = 100,maxiter = 1000,convergence_criteria = 'Labs')
fit0$obj
devtools::load_all()
fit0 = ebpmf_identity(X,3,printevery = 100,maxiter = 1000,convergence_criteria = 'Labs')
plot(fit0$obj)
fit0 = ebpmf_identity(X,3,printevery = 1,ebpm.fn = c(ebpm::ebpm_point_gamma,pois_smooth_split),convergence_criteria = 'Labs')
plot(fit0$EF[,1],type='l')
plot(fit0$EF[,2],type='l')
plot(fit0$EF[,3],type='l')
set.seed(123)
n = 120
p = 256
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
FF = FF + matrix(rnorm(n*K,0,0.5),nrow=n)
fit0 = ebpmf_identity(X,3,printevery = 1)
plot(fit0$EF[,1])
plot(fit0$EF[,2])
plot(fit0$EF[,3])
fit1 = ebpmf_identity(X,3,printevery = 1,ebpm.fn = c(ebpm::ebpm_point_gamma,pois_smooth_split),convergence_criteria = 'Labs')
plot(fit1$EF[,1])
plot(fit1$EF[,2])
plot(fit1$EF[,3])
set.seed(123)
n = 120
p = 256
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
FF = FF + matrix(rnorm(p*K,0,1),nrow=n)
set.seed(123)
n = 120
p = 256
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
FF = FF + matrix(rnorm(p*K,0,1),nrow=p)
dim(matrix(rnorm(p*K,0,1),nrow=p))
dim(FF)
set.seed(123)
n = 120
p = 256
K= 3
L = matrix(0, nrow=n, ncol=K)
FF = matrix(0, nrow=K, ncol=p)
L[1:(n/3),1] = 1
L[((n/3)+1):(2*n/3),2] = 1
L[((2*n/3)+1):n,3] = 1
L = L + matrix(runif(n*K,0,0.5),nrow=n)
FF[1,1:(p/3)] = 1+10
FF[2,((p/3)+1):(2*p/3)] = 1+10
FF[3,((2*p/3)+1):p] = 1+10
FF = FF + matrix(rnorm(p*K,0,1),ncol=p)
FF = pmax(FF,0)
lambda = L %*% FF
X = matrix(rpois(n=length(lambda),lambda),nrow=n)
fit0 = ebpmf_identity(X,3,printevery = 1)
plot(fit0$EF[,1])
plot(fit0$EF[,1],type='l')
plot(fit0$EF[,2],type='l')
plot(fit0$EF[,3],type='l')
fit1 = ebpmf_identity(X,3,printevery = 1,ebpm.fn = c(ebpm::ebpm_point_gamma,pois_smooth_split,convergence_criteria = 'Labs')
)
fit1 = ebpmf_identity(X,3,printevery = 1,ebpm.fn = c(ebpm::ebpm_point_gamma,pois_smooth_split),convergence_criteria = 'Labs')
plot(fit1$EF[,1])
plot(fit1$EF[,1],type='l')
plot(fit1$EF[,2],type='l')
plot(fit1$EF[,3],type='l')
?flash
library(stm)
